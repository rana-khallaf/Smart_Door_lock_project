
testing5.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000298  00800060  000038fc  00003970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002e08  00000000  00000000  00003c08  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e5f  00000000  00000000  00006a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000786f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000079af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00007b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00009768  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000a653  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000b400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000b560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000bfbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3f       	cpi	r26, 0xF8	; 248
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 30 13 	call	0x2660	; 0x2660 <main>
      7a:	0c 94 7c 1c 	jmp	0x38f8	; 0x38f8 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae eb       	ldi	r26, 0xBE	; 190
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 45 1c 	jmp	0x388a	; 0x388a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8e eb       	ldi	r24, 0xBE	; 190
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 61 1c 	jmp	0x38c2	; 0x38c2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 51 1c 	jmp	0x38a2	; 0x38a2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6d 1c 	jmp	0x38da	; 0x38da <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 71 1c 	jmp	0x38e2	; 0x38e2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <CLCD_voidInit>:
#include "CLCD_extrachar.h"
#include <util/delay.h>


void CLCD_voidInit(void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c6 54       	subi	r28, 0x46	; 70
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	fe 01       	movw	r30, r28
     b52:	ed 5b       	subi	r30, 0xBD	; 189
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a4 e3       	ldi	r26, 0x34	; 52
     b5c:	b2 e4       	ldi	r27, 0x42	; 66
     b5e:	80 83       	st	Z, r24
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	a2 83       	std	Z+2, r26	; 0x02
     b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b66:	8e 01       	movw	r16, r28
     b68:	01 5c       	subi	r16, 0xC1	; 193
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	fe 01       	movw	r30, r28
     b6e:	ed 5b       	subi	r30, 0xBD	; 189
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	4a e7       	ldi	r20, 0x7A	; 122
     b80:	53 e4       	ldi	r21, 0x43	; 67
     b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 83       	st	Z, r24
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	a2 83       	std	Z+2, r26	; 0x02
     b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b94:	fe 01       	movw	r30, r28
     b96:	ff 96       	adiw	r30, 0x3f	; 63
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <CLCD_voidInit+0x84>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9e af       	std	Y+62, r25	; 0x3e
     bb6:	8d af       	std	Y+61, r24	; 0x3d
     bb8:	46 c0       	rjmp	.+140    	; 0xc46 <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
     bba:	fe 01       	movw	r30, r28
     bbc:	ff 96       	adiw	r30, 0x3f	; 63
     bbe:	60 81       	ld	r22, Z
     bc0:	71 81       	ldd	r23, Z+1	; 0x01
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	57 e4       	ldi	r21, 0x47	; 71
     bce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd2:	18 16       	cp	r1, r24
     bd4:	64 f5       	brge	.+88     	; 0xc2e <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd6:	fe 01       	movw	r30, r28
     bd8:	ed 5b       	subi	r30, 0xBD	; 189
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e af       	std	Y+62, r25	; 0x3e
     c02:	8d af       	std	Y+61, r24	; 0x3d
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <CLCD_voidInit+0xee>
     c06:	89 e1       	ldi	r24, 0x19	; 25
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c af       	std	Y+60, r25	; 0x3c
     c0c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c10:	9c ad       	ldd	r25, Y+60	; 0x3c
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <CLCD_voidInit+0xdc>
     c16:	9c af       	std	Y+60, r25	; 0x3c
     c18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e af       	std	Y+62, r25	; 0x3e
     c22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d ad       	ldd	r24, Y+61	; 0x3d
     c26:	9e ad       	ldd	r25, Y+62	; 0x3e
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <CLCD_voidInit+0xd0>
     c2c:	16 c0       	rjmp	.+44     	; 0xc5a <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	fe 01       	movw	r30, r28
     c30:	ff 96       	adiw	r30, 0x3f	; 63
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e af       	std	Y+62, r25	; 0x3e
     c44:	8d af       	std	Y+61, r24	; 0x3d
     c46:	8d ad       	ldd	r24, Y+61	; 0x3d
     c48:	9e ad       	ldd	r25, Y+62	; 0x3e
     c4a:	9a af       	std	Y+58, r25	; 0x3a
     c4c:	89 af       	std	Y+57, r24	; 0x39
     c4e:	89 ad       	ldd	r24, Y+57	; 0x39
     c50:	9a ad       	ldd	r25, Y+58	; 0x3a
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <CLCD_voidInit+0x11c>
     c56:	9a af       	std	Y+58, r25	; 0x3a
     c58:	89 af       	std	Y+57, r24	; 0x39
//#if CLCD_MODE==8
	_delay_ms(45);
	DIO_voidSetPortDirection(CLCD_DATA_PORT,PORT_DIR_OUTPUT);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	6f ef       	ldi	r22, 0xFF	; 255
     c5e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RS,PIN_DIR_OUTPUT);
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	64 e0       	ldi	r22, 0x04	; 4
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_RW,PIN_DIR_OUTPUT);
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	63 e0       	ldi	r22, 0x03	; 3
     c70:	41 e0       	ldi	r20, 0x01	; 1
     c72:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT,CLCD_EN,PIN_DIR_OUTPUT);
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>

	//to return the cursor to his first pos in first line
	CLCD_voidSendCommand(Lcd_Home);
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e8       	ldi	r26, 0x80	; 128
     c8c:	bf e3       	ldi	r27, 0x3F	; 63
     c8e:	8d ab       	std	Y+53, r24	; 0x35
     c90:	9e ab       	std	Y+54, r25	; 0x36
     c92:	af ab       	std	Y+55, r26	; 0x37
     c94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c96:	6d a9       	ldd	r22, Y+53	; 0x35
     c98:	7e a9       	ldd	r23, Y+54	; 0x36
     c9a:	8f a9       	ldd	r24, Y+55	; 0x37
     c9c:	98 ad       	ldd	r25, Y+56	; 0x38
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	4a e7       	ldi	r20, 0x7A	; 122
     ca4:	53 e4       	ldi	r21, 0x43	; 67
     ca6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     caa:	dc 01       	movw	r26, r24
     cac:	cb 01       	movw	r24, r22
     cae:	89 ab       	std	Y+49, r24	; 0x31
     cb0:	9a ab       	std	Y+50, r25	; 0x32
     cb2:	ab ab       	std	Y+51, r26	; 0x33
     cb4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cb6:	69 a9       	ldd	r22, Y+49	; 0x31
     cb8:	7a a9       	ldd	r23, Y+50	; 0x32
     cba:	8b a9       	ldd	r24, Y+51	; 0x33
     cbc:	9c a9       	ldd	r25, Y+52	; 0x34
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e8       	ldi	r20, 0x80	; 128
     cc4:	5f e3       	ldi	r21, 0x3F	; 63
     cc6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cca:	88 23       	and	r24, r24
     ccc:	2c f4       	brge	.+10     	; 0xcd8 <CLCD_voidInit+0x1a2>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	98 ab       	std	Y+48, r25	; 0x30
     cd4:	8f a7       	std	Y+47, r24	; 0x2f
     cd6:	3f c0       	rjmp	.+126    	; 0xd56 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
     cd8:	69 a9       	ldd	r22, Y+49	; 0x31
     cda:	7a a9       	ldd	r23, Y+50	; 0x32
     cdc:	8b a9       	ldd	r24, Y+51	; 0x33
     cde:	9c a9       	ldd	r25, Y+52	; 0x34
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	3f ef       	ldi	r19, 0xFF	; 255
     ce4:	4f e7       	ldi	r20, 0x7F	; 127
     ce6:	57 e4       	ldi	r21, 0x47	; 71
     ce8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cec:	18 16       	cp	r1, r24
     cee:	4c f5       	brge	.+82     	; 0xd42 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf0:	6d a9       	ldd	r22, Y+53	; 0x35
     cf2:	7e a9       	ldd	r23, Y+54	; 0x36
     cf4:	8f a9       	ldd	r24, Y+55	; 0x37
     cf6:	98 ad       	ldd	r25, Y+56	; 0x38
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e2       	ldi	r20, 0x20	; 32
     cfe:	51 e4       	ldi	r21, 0x41	; 65
     d00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	98 ab       	std	Y+48, r25	; 0x30
     d16:	8f a7       	std	Y+47, r24	; 0x2f
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <CLCD_voidInit+0x202>
     d1a:	89 e1       	ldi	r24, 0x19	; 25
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9e a7       	std	Y+46, r25	; 0x2e
     d20:	8d a7       	std	Y+45, r24	; 0x2d
     d22:	8d a5       	ldd	r24, Y+45	; 0x2d
     d24:	9e a5       	ldd	r25, Y+46	; 0x2e
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <CLCD_voidInit+0x1f0>
     d2a:	9e a7       	std	Y+46, r25	; 0x2e
     d2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d30:	98 a9       	ldd	r25, Y+48	; 0x30
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	98 ab       	std	Y+48, r25	; 0x30
     d36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d38:	8f a5       	ldd	r24, Y+47	; 0x2f
     d3a:	98 a9       	ldd	r25, Y+48	; 0x30
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	69 f7       	brne	.-38     	; 0xd1a <CLCD_voidInit+0x1e4>
     d40:	14 c0       	rjmp	.+40     	; 0xd6a <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d42:	69 a9       	ldd	r22, Y+49	; 0x31
     d44:	7a a9       	ldd	r23, Y+50	; 0x32
     d46:	8b a9       	ldd	r24, Y+51	; 0x33
     d48:	9c a9       	ldd	r25, Y+52	; 0x34
     d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	98 ab       	std	Y+48, r25	; 0x30
     d54:	8f a7       	std	Y+47, r24	; 0x2f
     d56:	8f a5       	ldd	r24, Y+47	; 0x2f
     d58:	98 a9       	ldd	r25, Y+48	; 0x30
     d5a:	9c a7       	std	Y+44, r25	; 0x2c
     d5c:	8b a7       	std	Y+43, r24	; 0x2b
     d5e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d60:	9c a5       	ldd	r25, Y+44	; 0x2c
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <CLCD_voidInit+0x22c>
     d66:	9c a7       	std	Y+44, r25	; 0x2c
     d68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	CLCD_voidSendCommand(EIGHT_BITS);
     d6a:	88 e3       	ldi	r24, 0x38	; 56
     d6c:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	a0 e8       	ldi	r26, 0x80	; 128
     d76:	bf e3       	ldi	r27, 0x3F	; 63
     d78:	8f a3       	std	Y+39, r24	; 0x27
     d7a:	98 a7       	std	Y+40, r25	; 0x28
     d7c:	a9 a7       	std	Y+41, r26	; 0x29
     d7e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d80:	6f a1       	ldd	r22, Y+39	; 0x27
     d82:	78 a5       	ldd	r23, Y+40	; 0x28
     d84:	89 a5       	ldd	r24, Y+41	; 0x29
     d86:	9a a5       	ldd	r25, Y+42	; 0x2a
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a e7       	ldi	r20, 0x7A	; 122
     d8e:	53 e4       	ldi	r21, 0x43	; 67
     d90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	8b a3       	std	Y+35, r24	; 0x23
     d9a:	9c a3       	std	Y+36, r25	; 0x24
     d9c:	ad a3       	std	Y+37, r26	; 0x25
     d9e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     da0:	6b a1       	ldd	r22, Y+35	; 0x23
     da2:	7c a1       	ldd	r23, Y+36	; 0x24
     da4:	8d a1       	ldd	r24, Y+37	; 0x25
     da6:	9e a1       	ldd	r25, Y+38	; 0x26
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	40 e8       	ldi	r20, 0x80	; 128
     dae:	5f e3       	ldi	r21, 0x3F	; 63
     db0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     db4:	88 23       	and	r24, r24
     db6:	2c f4       	brge	.+10     	; 0xdc2 <CLCD_voidInit+0x28c>
		__ticks = 1;
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9a a3       	std	Y+34, r25	; 0x22
     dbe:	89 a3       	std	Y+33, r24	; 0x21
     dc0:	3f c0       	rjmp	.+126    	; 0xe40 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
     dc2:	6b a1       	ldd	r22, Y+35	; 0x23
     dc4:	7c a1       	ldd	r23, Y+36	; 0x24
     dc6:	8d a1       	ldd	r24, Y+37	; 0x25
     dc8:	9e a1       	ldd	r25, Y+38	; 0x26
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	3f ef       	ldi	r19, 0xFF	; 255
     dce:	4f e7       	ldi	r20, 0x7F	; 127
     dd0:	57 e4       	ldi	r21, 0x47	; 71
     dd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	4c f5       	brge	.+82     	; 0xe2c <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dda:	6f a1       	ldd	r22, Y+39	; 0x27
     ddc:	78 a5       	ldd	r23, Y+40	; 0x28
     dde:	89 a5       	ldd	r24, Y+41	; 0x29
     de0:	9a a5       	ldd	r25, Y+42	; 0x2a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e2       	ldi	r20, 0x20	; 32
     de8:	51 e4       	ldi	r21, 0x41	; 65
     dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	9a a3       	std	Y+34, r25	; 0x22
     e00:	89 a3       	std	Y+33, r24	; 0x21
     e02:	0f c0       	rjmp	.+30     	; 0xe22 <CLCD_voidInit+0x2ec>
     e04:	89 e1       	ldi	r24, 0x19	; 25
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	98 a3       	std	Y+32, r25	; 0x20
     e0a:	8f 8f       	std	Y+31, r24	; 0x1f
     e0c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e0e:	98 a1       	ldd	r25, Y+32	; 0x20
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <CLCD_voidInit+0x2da>
     e14:	98 a3       	std	Y+32, r25	; 0x20
     e16:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e18:	89 a1       	ldd	r24, Y+33	; 0x21
     e1a:	9a a1       	ldd	r25, Y+34	; 0x22
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	9a a3       	std	Y+34, r25	; 0x22
     e20:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e22:	89 a1       	ldd	r24, Y+33	; 0x21
     e24:	9a a1       	ldd	r25, Y+34	; 0x22
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	69 f7       	brne	.-38     	; 0xe04 <CLCD_voidInit+0x2ce>
     e2a:	14 c0       	rjmp	.+40     	; 0xe54 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2c:	6b a1       	ldd	r22, Y+35	; 0x23
     e2e:	7c a1       	ldd	r23, Y+36	; 0x24
     e30:	8d a1       	ldd	r24, Y+37	; 0x25
     e32:	9e a1       	ldd	r25, Y+38	; 0x26
     e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	9a a3       	std	Y+34, r25	; 0x22
     e3e:	89 a3       	std	Y+33, r24	; 0x21
     e40:	89 a1       	ldd	r24, Y+33	; 0x21
     e42:	9a a1       	ldd	r25, Y+34	; 0x22
     e44:	9e 8f       	std	Y+30, r25	; 0x1e
     e46:	8d 8f       	std	Y+29, r24	; 0x1d
     e48:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <CLCD_voidInit+0x316>
     e50:	9e 8f       	std	Y+30, r25	; 0x1e
     e52:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	CLCD_voidSendCommand(Lcd_DisplayOn_CursorOff);
     e54:	8c e0       	ldi	r24, 0x0C	; 12
     e56:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e8       	ldi	r26, 0x80	; 128
     e60:	bf e3       	ldi	r27, 0x3F	; 63
     e62:	89 8f       	std	Y+25, r24	; 0x19
     e64:	9a 8f       	std	Y+26, r25	; 0x1a
     e66:	ab 8f       	std	Y+27, r26	; 0x1b
     e68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6a:	69 8d       	ldd	r22, Y+25	; 0x19
     e6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e70:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a e7       	ldi	r20, 0x7A	; 122
     e78:	53 e4       	ldi	r21, 0x43	; 67
     e7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	8d 8b       	std	Y+21, r24	; 0x15
     e84:	9e 8b       	std	Y+22, r25	; 0x16
     e86:	af 8b       	std	Y+23, r26	; 0x17
     e88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e8a:	6d 89       	ldd	r22, Y+21	; 0x15
     e8c:	7e 89       	ldd	r23, Y+22	; 0x16
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e9e:	88 23       	and	r24, r24
     ea0:	2c f4       	brge	.+10     	; 0xeac <CLCD_voidInit+0x376>
		__ticks = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
     eac:	6d 89       	ldd	r22, Y+21	; 0x15
     eae:	7e 89       	ldd	r23, Y+22	; 0x16
     eb0:	8f 89       	ldd	r24, Y+23	; 0x17
     eb2:	98 8d       	ldd	r25, Y+24	; 0x18
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	3f ef       	ldi	r19, 0xFF	; 255
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	57 e4       	ldi	r21, 0x47	; 71
     ebc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	4c f5       	brge	.+82     	; 0xf16 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	69 8d       	ldd	r22, Y+25	; 0x19
     ec6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ec8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9c 8b       	std	Y+20, r25	; 0x14
     eea:	8b 8b       	std	Y+19, r24	; 0x13
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <CLCD_voidInit+0x3d6>
     eee:	89 e1       	ldi	r24, 0x19	; 25
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9a 8b       	std	Y+18, r25	; 0x12
     ef4:	89 8b       	std	Y+17, r24	; 0x11
     ef6:	89 89       	ldd	r24, Y+17	; 0x11
     ef8:	9a 89       	ldd	r25, Y+18	; 0x12
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <CLCD_voidInit+0x3c4>
     efe:	9a 8b       	std	Y+18, r25	; 0x12
     f00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8b 89       	ldd	r24, Y+19	; 0x13
     f04:	9c 89       	ldd	r25, Y+20	; 0x14
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9c 8b       	std	Y+20, r25	; 0x14
     f0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8b 89       	ldd	r24, Y+19	; 0x13
     f0e:	9c 89       	ldd	r25, Y+20	; 0x14
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <CLCD_voidInit+0x3b8>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	6d 89       	ldd	r22, Y+21	; 0x15
     f18:	7e 89       	ldd	r23, Y+22	; 0x16
     f1a:	8f 89       	ldd	r24, Y+23	; 0x17
     f1c:	98 8d       	ldd	r25, Y+24	; 0x18
     f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	8b 8b       	std	Y+19, r24	; 0x13
     f2a:	8b 89       	ldd	r24, Y+19	; 0x13
     f2c:	9c 89       	ldd	r25, Y+20	; 0x14
     f2e:	98 8b       	std	Y+16, r25	; 0x10
     f30:	8f 87       	std	Y+15, r24	; 0x0f
     f32:	8f 85       	ldd	r24, Y+15	; 0x0f
     f34:	98 89       	ldd	r25, Y+16	; 0x10
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <CLCD_voidInit+0x400>
     f3a:	98 8b       	std	Y+16, r25	; 0x10
     f3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	CLCD_voidClearScreen();
     f3e:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>

	CLCD_voidSendCommand(Lcd_EntryMode);
     f42:	86 e0       	ldi	r24, 0x06	; 6
     f44:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e8       	ldi	r26, 0x80	; 128
     f4e:	bf e3       	ldi	r27, 0x3F	; 63
     f50:	8b 87       	std	Y+11, r24	; 0x0b
     f52:	9c 87       	std	Y+12, r25	; 0x0c
     f54:	ad 87       	std	Y+13, r26	; 0x0d
     f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f58:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	4a e7       	ldi	r20, 0x7A	; 122
     f66:	53 e4       	ldi	r21, 0x43	; 67
     f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	8f 83       	std	Y+7, r24	; 0x07
     f72:	98 87       	std	Y+8, r25	; 0x08
     f74:	a9 87       	std	Y+9, r26	; 0x09
     f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f8c:	88 23       	and	r24, r24
     f8e:	2c f4       	brge	.+10     	; 0xf9a <CLCD_voidInit+0x464>
		__ticks = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	9e 83       	std	Y+6, r25	; 0x06
     f96:	8d 83       	std	Y+5, r24	; 0x05
     f98:	3f c0       	rjmp	.+126    	; 0x1018 <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
     f9a:	6f 81       	ldd	r22, Y+7	; 0x07
     f9c:	78 85       	ldd	r23, Y+8	; 0x08
     f9e:	89 85       	ldd	r24, Y+9	; 0x09
     fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	57 e4       	ldi	r21, 0x47	; 71
     faa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fae:	18 16       	cp	r1, r24
     fb0:	4c f5       	brge	.+82     	; 0x1004 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
     fda:	0f c0       	rjmp	.+30     	; 0xffa <CLCD_voidInit+0x4c4>
     fdc:	89 e1       	ldi	r24, 0x19	; 25
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c 83       	std	Y+4, r25	; 0x04
     fe2:	8b 83       	std	Y+3, r24	; 0x03
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <CLCD_voidInit+0x4b2>
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9e 83       	std	Y+6, r25	; 0x06
     ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f7       	brne	.-38     	; 0xfdc <CLCD_voidInit+0x4a6>
    1002:	14 c0       	rjmp	.+40     	; 0x102c <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	9a 83       	std	Y+2, r25	; 0x02
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	f1 f7       	brne	.-4      	; 0x1024 <CLCD_voidInit+0x4ee>
    1028:	9a 83       	std	Y+2, r25	; 0x02
    102a:	89 83       	std	Y+1, r24	; 0x01

//#elif CLCD_MODE==4
//#endif


}
    102c:	ca 5b       	subi	r28, 0xBA	; 186
    102e:	df 4f       	sbci	r29, 0xFF	; 255
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <CLCD_voidSendData>:



void CLCD_voidSendData(u8 Copy_u8Data)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	2f 97       	sbiw	r28, 0x0f	; 15
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	8f 87       	std	Y+15, r24	; 0x0f

//#if CLCD_MODE==8
DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	6f 85       	ldd	r22, Y+15	; 0x0f
    105e:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_voidSetPortValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,PIN_VAL_HIGH);
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	64 e0       	ldi	r22, 0x04	; 4
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,PIN_VAL_LOW);
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>

CLCD_voidSendFallingEdge();
    1076:	0e 94 1e 0a 	call	0x143c	; 0x143c <CLCD_voidSendFallingEdge>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a e7       	ldi	r20, 0x7A	; 122
    1098:	53 e4       	ldi	r21, 0x43	; 67
    109a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <CLCD_voidSendData+0x88>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <CLCD_voidSendData+0xe8>
    110e:	89 e1       	ldi	r24, 0x19	; 25
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <CLCD_voidSendData+0xd6>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <CLCD_voidSendData+0xca>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <CLCD_voidSendData+0x112>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
//#endif
_delay_ms(1);



}
    115e:	2f 96       	adiw	r28, 0x0f	; 15
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <CLCD_voidSendCommand>:



void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	2f 97       	sbiw	r28, 0x0f	; 15
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	8f 87       	std	Y+15, r24	; 0x0f
//#if CLCD_MODE==8
DIO_voidSetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	6f 85       	ldd	r22, Y+15	; 0x0f
    118a:	0e 94 30 0c 	call	0x1860	; 0x1860 <DIO_voidSetPortValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RS,PIN_VAL_LOW);
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	64 e0       	ldi	r22, 0x04	; 4
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_RW,PIN_VAL_LOW);
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	63 e0       	ldi	r22, 0x03	; 3
    119c:	40 e0       	ldi	r20, 0x00	; 0
    119e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>

CLCD_voidSendFallingEdge();
    11a2:	0e 94 1e 0a 	call	0x143c	; 0x143c <CLCD_voidSendFallingEdge>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a0 e8       	ldi	r26, 0x80	; 128
    11ac:	bf e3       	ldi	r27, 0x3F	; 63
    11ae:	8b 87       	std	Y+11, r24	; 0x0b
    11b0:	9c 87       	std	Y+12, r25	; 0x0c
    11b2:	ad 87       	std	Y+13, r26	; 0x0d
    11b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    11bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a e7       	ldi	r20, 0x7A	; 122
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8f 83       	std	Y+7, r24	; 0x07
    11d0:	98 87       	std	Y+8, r25	; 0x08
    11d2:	a9 87       	std	Y+9, r26	; 0x09
    11d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e8       	ldi	r20, 0x80	; 128
    11e4:	5f e3       	ldi	r21, 0x3F	; 63
    11e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11ea:	88 23       	and	r24, r24
    11ec:	2c f4       	brge	.+10     	; 0x11f8 <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9e 83       	std	Y+6, r25	; 0x06
    11f4:	8d 83       	std	Y+5, r24	; 0x05
    11f6:	3f c0       	rjmp	.+126    	; 0x1276 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    11f8:	6f 81       	ldd	r22, Y+7	; 0x07
    11fa:	78 85       	ldd	r23, Y+8	; 0x08
    11fc:	89 85       	ldd	r24, Y+9	; 0x09
    11fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	3f ef       	ldi	r19, 0xFF	; 255
    1204:	4f e7       	ldi	r20, 0x7F	; 127
    1206:	57 e4       	ldi	r21, 0x47	; 71
    1208:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    120c:	18 16       	cp	r1, r24
    120e:	4c f5       	brge	.+82     	; 0x1262 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1210:	6b 85       	ldd	r22, Y+11	; 0x0b
    1212:	7c 85       	ldd	r23, Y+12	; 0x0c
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d
    1216:	9e 85       	ldd	r25, Y+14	; 0x0e
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e2       	ldi	r20, 0x20	; 32
    121e:	51 e4       	ldi	r21, 0x41	; 65
    1220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	bc 01       	movw	r22, r24
    122a:	cd 01       	movw	r24, r26
    122c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	8d 83       	std	Y+5, r24	; 0x05
    1238:	0f c0       	rjmp	.+30     	; 0x1258 <CLCD_voidSendCommand+0xe8>
    123a:	89 e1       	ldi	r24, 0x19	; 25
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	9c 83       	std	Y+4, r25	; 0x04
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <CLCD_voidSendCommand+0xd6>
    124a:	9c 83       	std	Y+4, r25	; 0x04
    124c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	01 97       	sbiw	r24, 0x01	; 1
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	69 f7       	brne	.-38     	; 0x123a <CLCD_voidSendCommand+0xca>
    1260:	14 c0       	rjmp	.+40     	; 0x128a <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1262:	6f 81       	ldd	r22, Y+7	; 0x07
    1264:	78 85       	ldd	r23, Y+8	; 0x08
    1266:	89 85       	ldd	r24, Y+9	; 0x09
    1268:	9a 85       	ldd	r25, Y+10	; 0x0a
    126a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	9a 83       	std	Y+2, r25	; 0x02
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <CLCD_voidSendCommand+0x112>
    1286:	9a 83       	std	Y+2, r25	; 0x02
    1288:	89 83       	std	Y+1, r24	; 0x01
//#elif CLCD_MODE==4

//#endif
_delay_ms(1);

	}
    128a:	2f 96       	adiw	r28, 0x0f	; 15
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	f8 94       	cli
    1290:	de bf       	out	0x3e, r29	; 62
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	cd bf       	out	0x3d, r28	; 61
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <CLCD_voidSendString>:

void CLCD_voidSendString(const u8 *Copy_u8PtrString)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <CLCD_voidSendString+0x6>
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 LOC_u8Iterator=0;
    12ac:	19 82       	std	Y+1, r1	; 0x01
    12ae:	0e c0       	rjmp	.+28     	; 0x12cc <CLCD_voidSendString+0x30>

	while(Copy_u8PtrString[LOC_u8Iterator]!='\0')
	{
		CLCD_voidSendData(Copy_u8PtrString[LOC_u8Iterator]);
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	fc 01       	movw	r30, r24
    12bc:	e2 0f       	add	r30, r18
    12be:	f3 1f       	adc	r31, r19
    12c0:	80 81       	ld	r24, Z
    12c2:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
		LOC_u8Iterator++;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	89 83       	std	Y+1, r24	; 0x01

void CLCD_voidSendString(const u8 *Copy_u8PtrString)
{
	u8 LOC_u8Iterator=0;

	while(Copy_u8PtrString[LOC_u8Iterator]!='\0')
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	9b 81       	ldd	r25, Y+3	; 0x03
    12d6:	fc 01       	movw	r30, r24
    12d8:	e2 0f       	add	r30, r18
    12da:	f3 1f       	adc	r31, r19
    12dc:	80 81       	ld	r24, Z
    12de:	88 23       	and	r24, r24
    12e0:	39 f7       	brne	.-50     	; 0x12b0 <CLCD_voidSendString+0x14>
		CLCD_voidSendData(Copy_u8PtrString[LOC_u8Iterator]);
		LOC_u8Iterator++;

	}

}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <CLCD_voidSetPosition>:

*/


void CLCD_voidSetPosition(u8 Copy_u8X, u8 Copy_u8Y)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <CLCD_voidSetPosition+0x6>
    12f4:	0f 92       	push	r0
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	8a 83       	std	Y+2, r24	; 0x02
    12fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Position = 0;
    12fe:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8X ==CLCD_ROW_1)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	19 f4       	brne	.+6      	; 0x130c <CLCD_voidSetPosition+0x1e>
	{
		Local_u8Position=Copy_u8Y;
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	06 c0       	rjmp	.+12     	; 0x1318 <CLCD_voidSetPosition+0x2a>
	}
	else if (Copy_u8X ==CLCD_ROW_2)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	19 f4       	brne	.+6      	; 0x1318 <CLCD_voidSetPosition+0x2a>
	{
		Local_u8Position = Copy_u8Y +0x40;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	80 5c       	subi	r24, 0xC0	; 192
    1316:	89 83       	std	Y+1, r24	; 0x01
	}

	CLCD_voidSendCommand(Local_u8Position+Lcd_SetCursor); // Set DDRAM Address
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	80 58       	subi	r24, 0x80	; 128
    131c:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <CLCD_voidClearScreen>:




void CLCD_voidClearScreen(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	2e 97       	sbiw	r28, 0x0e	; 14
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(Lcd_Clear);
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 e2       	ldi	r26, 0x20	; 32
    134c:	b1 e4       	ldi	r27, 0x41	; 65
    134e:	8b 87       	std	Y+11, r24	; 0x0b
    1350:	9c 87       	std	Y+12, r25	; 0x0c
    1352:	ad 87       	std	Y+13, r26	; 0x0d
    1354:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	6b 85       	ldd	r22, Y+11	; 0x0b
    1358:	7c 85       	ldd	r23, Y+12	; 0x0c
    135a:	8d 85       	ldd	r24, Y+13	; 0x0d
    135c:	9e 85       	ldd	r25, Y+14	; 0x0e
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a e7       	ldi	r20, 0x7A	; 122
    1364:	53 e4       	ldi	r21, 0x43	; 67
    1366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8f 83       	std	Y+7, r24	; 0x07
    1370:	98 87       	std	Y+8, r25	; 0x08
    1372:	a9 87       	std	Y+9, r26	; 0x09
    1374:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1376:	6f 81       	ldd	r22, Y+7	; 0x07
    1378:	78 85       	ldd	r23, Y+8	; 0x08
    137a:	89 85       	ldd	r24, Y+9	; 0x09
    137c:	9a 85       	ldd	r25, Y+10	; 0x0a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	2c f4       	brge	.+10     	; 0x1398 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	4c f5       	brge	.+82     	; 0x1402 <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9e 83       	std	Y+6, r25	; 0x06
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <CLCD_voidClearScreen+0xcc>
    13da:	89 e1       	ldi	r24, 0x19	; 25
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <CLCD_voidClearScreen+0xba>
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	8d 81       	ldd	r24, Y+5	; 0x05
    13fa:	9e 81       	ldd	r25, Y+6	; 0x06
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <CLCD_voidClearScreen+0xae>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	6f 81       	ldd	r22, Y+7	; 0x07
    1404:	78 85       	ldd	r23, Y+8	; 0x08
    1406:	89 85       	ldd	r24, Y+9	; 0x09
    1408:	9a 85       	ldd	r25, Y+10	; 0x0a
    140a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9e 83       	std	Y+6, r25	; 0x06
    1414:	8d 83       	std	Y+5, r24	; 0x05
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	9a 83       	std	Y+2, r25	; 0x02
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <CLCD_voidClearScreen+0xf6>
    1426:	9a 83       	std	Y+2, r25	; 0x02
    1428:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //MORE THAN 1,53ms

}
    142a:	2e 96       	adiw	r28, 0x0e	; 14
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <CLCD_voidSendFallingEdge>:



static void CLCD_voidSendFallingEdge(void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	6c 97       	sbiw	r28, 0x1c	; 28
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_EN,PIN_VAL_HIGH);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	62 e0       	ldi	r22, 0x02	; 2
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	a0 e8       	ldi	r26, 0x80	; 128
    1460:	bf e3       	ldi	r27, 0x3F	; 63
    1462:	89 8f       	std	Y+25, r24	; 0x19
    1464:	9a 8f       	std	Y+26, r25	; 0x1a
    1466:	ab 8f       	std	Y+27, r26	; 0x1b
    1468:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	69 8d       	ldd	r22, Y+25	; 0x19
    146c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a e7       	ldi	r20, 0x7A	; 122
    1478:	53 e4       	ldi	r21, 0x43	; 67
    147a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8d 8b       	std	Y+21, r24	; 0x15
    1484:	9e 8b       	std	Y+22, r25	; 0x16
    1486:	af 8b       	std	Y+23, r26	; 0x17
    1488:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    148a:	6d 89       	ldd	r22, Y+21	; 0x15
    148c:	7e 89       	ldd	r23, Y+22	; 0x16
    148e:	8f 89       	ldd	r24, Y+23	; 0x17
    1490:	98 8d       	ldd	r25, Y+24	; 0x18
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    14ac:	6d 89       	ldd	r22, Y+21	; 0x15
    14ae:	7e 89       	ldd	r23, Y+22	; 0x16
    14b0:	8f 89       	ldd	r24, Y+23	; 0x17
    14b2:	98 8d       	ldd	r25, Y+24	; 0x18
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	69 8d       	ldd	r22, Y+25	; 0x19
    14c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9c 8b       	std	Y+20, r25	; 0x14
    14ea:	8b 8b       	std	Y+19, r24	; 0x13
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <CLCD_voidSendFallingEdge+0xd0>
    14ee:	89 e1       	ldi	r24, 0x19	; 25
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9a 8b       	std	Y+18, r25	; 0x12
    14f4:	89 8b       	std	Y+17, r24	; 0x11
    14f6:	89 89       	ldd	r24, Y+17	; 0x11
    14f8:	9a 89       	ldd	r25, Y+18	; 0x12
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <CLCD_voidSendFallingEdge+0xbe>
    14fe:	9a 8b       	std	Y+18, r25	; 0x12
    1500:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8b 89       	ldd	r24, Y+19	; 0x13
    1504:	9c 89       	ldd	r25, Y+20	; 0x14
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9c 8b       	std	Y+20, r25	; 0x14
    150a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <CLCD_voidSendFallingEdge+0xb2>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6d 89       	ldd	r22, Y+21	; 0x15
    1518:	7e 89       	ldd	r23, Y+22	; 0x16
    151a:	8f 89       	ldd	r24, Y+23	; 0x17
    151c:	98 8d       	ldd	r25, Y+24	; 0x18
    151e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9c 8b       	std	Y+20, r25	; 0x14
    1528:	8b 8b       	std	Y+19, r24	; 0x13
    152a:	8b 89       	ldd	r24, Y+19	; 0x13
    152c:	9c 89       	ldd	r25, Y+20	; 0x14
    152e:	98 8b       	std	Y+16, r25	; 0x10
    1530:	8f 87       	std	Y+15, r24	; 0x0f
    1532:	8f 85       	ldd	r24, Y+15	; 0x0f
    1534:	98 89       	ldd	r25, Y+16	; 0x10
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <CLCD_voidSendFallingEdge+0xfa>
    153a:	98 8b       	std	Y+16, r25	; 0x10
    153c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);


	DIO_voidSetPinValue(CLCD_CONTROL_PORT,CLCD_EN,PIN_VAL_LOW);
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	40 e0       	ldi	r20, 0x00	; 0
    1544:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	a0 e8       	ldi	r26, 0x80	; 128
    154e:	bf e3       	ldi	r27, 0x3F	; 63
    1550:	8b 87       	std	Y+11, r24	; 0x0b
    1552:	9c 87       	std	Y+12, r25	; 0x0c
    1554:	ad 87       	std	Y+13, r26	; 0x0d
    1556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1558:	6b 85       	ldd	r22, Y+11	; 0x0b
    155a:	7c 85       	ldd	r23, Y+12	; 0x0c
    155c:	8d 85       	ldd	r24, Y+13	; 0x0d
    155e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	4a e7       	ldi	r20, 0x7A	; 122
    1566:	53 e4       	ldi	r21, 0x43	; 67
    1568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	8f 83       	std	Y+7, r24	; 0x07
    1572:	98 87       	std	Y+8, r25	; 0x08
    1574:	a9 87       	std	Y+9, r26	; 0x09
    1576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1578:	6f 81       	ldd	r22, Y+7	; 0x07
    157a:	78 85       	ldd	r23, Y+8	; 0x08
    157c:	89 85       	ldd	r24, Y+9	; 0x09
    157e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	40 e8       	ldi	r20, 0x80	; 128
    1586:	5f e3       	ldi	r21, 0x3F	; 63
    1588:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    158c:	88 23       	and	r24, r24
    158e:	2c f4       	brge	.+10     	; 0x159a <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
    1598:	3f c0       	rjmp	.+126    	; 0x1618 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    159a:	6f 81       	ldd	r22, Y+7	; 0x07
    159c:	78 85       	ldd	r23, Y+8	; 0x08
    159e:	89 85       	ldd	r24, Y+9	; 0x09
    15a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	3f ef       	ldi	r19, 0xFF	; 255
    15a6:	4f e7       	ldi	r20, 0x7F	; 127
    15a8:	57 e4       	ldi	r21, 0x47	; 71
    15aa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	4c f5       	brge	.+82     	; 0x1604 <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <CLCD_voidSendFallingEdge+0x1be>
    15dc:	89 e1       	ldi	r24, 0x19	; 25
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9c 83       	std	Y+4, r25	; 0x04
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	f1 f7       	brne	.-4      	; 0x15e8 <CLCD_voidSendFallingEdge+0x1ac>
    15ec:	9c 83       	std	Y+4, r25	; 0x04
    15ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9e 83       	std	Y+6, r25	; 0x06
    15f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	69 f7       	brne	.-38     	; 0x15dc <CLCD_voidSendFallingEdge+0x1a0>
    1602:	14 c0       	rjmp	.+40     	; 0x162c <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	9e 83       	std	Y+6, r25	; 0x06
    1616:	8d 83       	std	Y+5, r24	; 0x05
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	9a 81       	ldd	r25, Y+2	; 0x02
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <CLCD_voidSendFallingEdge+0x1e8>
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);


}
    162c:	6c 96       	adiw	r28, 0x1c	; 28
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <CLCD_voidSendExtraChar>:


// you enter the position of display the (row,col),and the start i want to display char from it and the end

void CLCD_voidSendExtraChar(u8 Copy_u8Row ,u8 Copy_u8Col,u8 start,u8 end)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <CLCD_voidSendExtraChar+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <CLCD_voidSendExtraChar+0x8>
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	6b 83       	std	Y+3, r22	; 0x03
    1650:	4c 83       	std	Y+4, r20	; 0x04
    1652:	2d 83       	std	Y+5, r18	; 0x05
	u8 lOC_u8Iterator=0;
    1654:	19 82       	std	Y+1, r1	; 0x01


	CLCD_voidSendCommand(Lcd_CGRAM);
    1656:	80 e4       	ldi	r24, 0x40	; 64
    1658:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>



	for(lOC_u8Iterator=0;lOC_u8Iterator<(sizeof(CLCD_u8ExtraChar)/sizeof(CLCD_u8ExtraChar[0]));lOC_u8Iterator++)
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	0c c0       	rjmp	.+24     	; 0x1678 <CLCD_voidSendExtraChar+0x3a>
	{
		CLCD_voidSendData(CLCD_u8ExtraChar[lOC_u8Iterator]);
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	fc 01       	movw	r30, r24
    1668:	ea 53       	subi	r30, 0x3A	; 58
    166a:	fd 4f       	sbci	r31, 0xFD	; 253
    166c:	80 81       	ld	r24, Z
    166e:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>

	CLCD_voidSendCommand(Lcd_CGRAM);



	for(lOC_u8Iterator=0;lOC_u8Iterator<(sizeof(CLCD_u8ExtraChar)/sizeof(CLCD_u8ExtraChar[0]));lOC_u8Iterator++)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	8f 5f       	subi	r24, 0xFF	; 255
    1676:	89 83       	std	Y+1, r24	; 0x01
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	80 33       	cpi	r24, 0x30	; 48
    167c:	88 f3       	brcs	.-30     	; 0x1660 <CLCD_voidSendExtraChar+0x22>



	}

	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	6b 81       	ldd	r22, Y+3	; 0x03
    1682:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

	for(lOC_u8Iterator=start;lOC_u8Iterator<end;lOC_u8Iterator++)
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	06 c0       	rjmp	.+12     	; 0x1698 <CLCD_voidSendExtraChar+0x5a>
	{
		CLCD_voidSendData(lOC_u8Iterator);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>

	}

	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);

	for(lOC_u8Iterator=start;lOC_u8Iterator<end;lOC_u8Iterator++)
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	8f 5f       	subi	r24, 0xFF	; 255
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	99 81       	ldd	r25, Y+1	; 0x01
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	98 17       	cp	r25, r24
    169e:	b0 f3       	brcs	.-20     	; 0x168c <CLCD_voidSendExtraChar+0x4e>





}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <CLCD_voidDrawSpecialChar>:


void CLCD_voidDrawSpecialChar (u8 *Copy_pu8Pattern, u8 Copy_u8Loc,u8 Copy_u8X,u8 Copy_u8Y)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	27 97       	sbiw	r28, 0x07	; 7
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
    16c8:	6d 83       	std	Y+5, r22	; 0x05
    16ca:	4e 83       	std	Y+6, r20	; 0x06
    16cc:	2f 83       	std	Y+7, r18	; 0x07
	// Calculate the CGRAM Address
	u8 Local_u8CgramAdd = Copy_u8Loc * 8;
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	8a 83       	std	Y+2, r24	; 0x02
	// Command to write on CGRAM
	CLCD_voidSendCommand(Local_u8CgramAdd+64);
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	80 5c       	subi	r24, 0xC0	; 192
    16e6:	0e 94 b8 08 	call	0x1170	; 0x1170 <CLCD_voidSendCommand>


	for (u8 Local_u8Counter=0 ; Local_u8Counter <8 ; Local_u8Counter++)
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <CLCD_voidDrawSpecialChar+0x5a>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	fc 01       	movw	r30, r24
    16fa:	e2 0f       	add	r30, r18
    16fc:	f3 1f       	adc	r31, r19
    16fe:	80 81       	ld	r24, Z
    1700:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
	u8 Local_u8CgramAdd = Copy_u8Loc * 8;
	// Command to write on CGRAM
	CLCD_voidSendCommand(Local_u8CgramAdd+64);


	for (u8 Local_u8Counter=0 ; Local_u8Counter <8 ; Local_u8Counter++)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 30       	cpi	r24, 0x08	; 8
    170e:	78 f3       	brcs	.-34     	; 0x16ee <CLCD_voidDrawSpecialChar+0x3e>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Counter]);
	}
	CLCD_voidSetPosition(Copy_u8X,Copy_u8Y);
    1710:	8e 81       	ldd	r24, Y+6	; 0x06
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
	//CLCD_voidSendCommand(Local_u8CgramAdd+128);

}
    1718:	27 96       	adiw	r28, 0x07	; 7
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <CLCD_voidSendNum>:


/*********************************************************************************************************/

void CLCD_voidSendNum(u16 Copy_u16Num)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	2e 97       	sbiw	r28, 0x0e	; 14
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	9e 87       	std	Y+14, r25	; 0x0e
    1740:	8d 87       	std	Y+13, r24	; 0x0d
	u8 Local_u8Arr[10];
	u8 Local_u8Iterator1=0,Local_u8Iterator2;
    1742:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u16Num==0)
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	9e 85       	ldd	r25, Y+14	; 0x0e
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	11 f5       	brne	.+68     	; 0x1790 <CLCD_voidSendNum+0x66>
	{
		CLCD_voidSendData('0');
    174c:	80 e3       	ldi	r24, 0x30	; 48
    174e:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
    1752:	22 c0       	rjmp	.+68     	; 0x1798 <CLCD_voidSendNum+0x6e>
	}
	else
	{
		while(Copy_u16Num)
		{
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	e8 2f       	mov	r30, r24
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	8d 85       	ldd	r24, Y+13	; 0x0d
    175c:	9e 85       	ldd	r25, Y+14	; 0x0e
    175e:	2a e0       	ldi	r18, 0x0A	; 10
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	b9 01       	movw	r22, r18
    1764:	0e 94 31 1c 	call	0x3862	; 0x3862 <__udivmodhi4>
    1768:	28 2f       	mov	r18, r24
    176a:	20 5d       	subi	r18, 0xD0	; 208
    176c:	ce 01       	movw	r24, r28
    176e:	03 96       	adiw	r24, 0x03	; 3
    1770:	e8 0f       	add	r30, r24
    1772:	f9 1f       	adc	r31, r25
    1774:	20 83       	st	Z, r18
			Copy_u16Num/=10;
    1776:	8d 85       	ldd	r24, Y+13	; 0x0d
    1778:	9e 85       	ldd	r25, Y+14	; 0x0e
    177a:	2a e0       	ldi	r18, 0x0A	; 10
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	b9 01       	movw	r22, r18
    1780:	0e 94 31 1c 	call	0x3862	; 0x3862 <__udivmodhi4>
    1784:	cb 01       	movw	r24, r22
    1786:	9e 87       	std	Y+14, r25	; 0x0e
    1788:	8d 87       	std	Y+13, r24	; 0x0d
			Local_u8Iterator1++;
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Copy_u16Num)
    1790:	8d 85       	ldd	r24, Y+13	; 0x0d
    1792:	9e 85       	ldd	r25, Y+14	; 0x0e
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	f1 f6       	brne	.-68     	; 0x1754 <CLCD_voidSendNum+0x2a>
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
			Copy_u16Num/=10;
			Local_u8Iterator1++;
		}
	}
	for(Local_u8Iterator2=Local_u8Iterator1;Local_u8Iterator2>0;Local_u8Iterator2--)
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	11 c0       	rjmp	.+34     	; 0x17c0 <CLCD_voidSendNum+0x96>
	{
		CLCD_voidSendData(Local_u8Arr[Local_u8Iterator2-1]);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 01       	movw	r18, r24
    17a6:	21 50       	subi	r18, 0x01	; 1
    17a8:	30 40       	sbci	r19, 0x00	; 0
    17aa:	ce 01       	movw	r24, r28
    17ac:	03 96       	adiw	r24, 0x03	; 3
    17ae:	fc 01       	movw	r30, r24
    17b0:	e2 0f       	add	r30, r18
    17b2:	f3 1f       	adc	r31, r19
    17b4:	80 81       	ld	r24, Z
    17b6:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
			Local_u8Arr[Local_u8Iterator1]=Copy_u16Num%10 + '0';
			Copy_u16Num/=10;
			Local_u8Iterator1++;
		}
	}
	for(Local_u8Iterator2=Local_u8Iterator1;Local_u8Iterator2>0;Local_u8Iterator2--)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	81 50       	subi	r24, 0x01	; 1
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	88 23       	and	r24, r24
    17c4:	61 f7       	brne	.-40     	; 0x179e <CLCD_voidSendNum+0x74>
	{
		CLCD_voidSendData(Local_u8Arr[Local_u8Iterator2-1]);
	}

}
    17c6:	2e 96       	adiw	r28, 0x0e	; 14
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	08 95       	ret

000017d8 <DIO_voidSetPortDirection>:
			#include "DIO_config.h"
			#include "DIO_interface.h"
			#include "DIO_private.h"

			void DIO_voidSetPortDirection(u8 Copy_u8PORT,u8 Copy_u8DIRECTION)
			{
    17d8:	df 93       	push	r29
    17da:	cf 93       	push	r28
    17dc:	00 d0       	rcall	.+0      	; 0x17de <DIO_voidSetPortDirection+0x6>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <DIO_voidSetPortDirection+0x8>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	6a 83       	std	Y+2, r22	; 0x02
				if(DIO_PORTD>=Copy_u8PORT)
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	84 30       	cpi	r24, 0x04	; 4
    17ec:	90 f5       	brcc	.+100    	; 0x1852 <DIO_voidSetPortDirection+0x7a>
				{
					switch(Copy_u8PORT)
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	3c 83       	std	Y+4, r19	; 0x04
    17f6:	2b 83       	std	Y+3, r18	; 0x03
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	d1 f0       	breq	.+52     	; 0x1836 <DIO_voidSetPortDirection+0x5e>
    1802:	2b 81       	ldd	r18, Y+3	; 0x03
    1804:	3c 81       	ldd	r19, Y+4	; 0x04
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	2c f4       	brge	.+10     	; 0x1816 <DIO_voidSetPortDirection+0x3e>
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	61 f0       	breq	.+24     	; 0x182c <DIO_voidSetPortDirection+0x54>
    1814:	1e c0       	rjmp	.+60     	; 0x1852 <DIO_voidSetPortDirection+0x7a>
    1816:	2b 81       	ldd	r18, Y+3	; 0x03
    1818:	3c 81       	ldd	r19, Y+4	; 0x04
    181a:	22 30       	cpi	r18, 0x02	; 2
    181c:	31 05       	cpc	r19, r1
    181e:	81 f0       	breq	.+32     	; 0x1840 <DIO_voidSetPortDirection+0x68>
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	91 05       	cpc	r25, r1
    1828:	81 f0       	breq	.+32     	; 0x184a <DIO_voidSetPortDirection+0x72>
    182a:	13 c0       	rjmp	.+38     	; 0x1852 <DIO_voidSetPortDirection+0x7a>
					{
					case DIO_PORTA: DDRA=Copy_u8DIRECTION;break;
    182c:	ea e3       	ldi	r30, 0x3A	; 58
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	80 83       	st	Z, r24
    1834:	0e c0       	rjmp	.+28     	; 0x1852 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTB: DDRB=Copy_u8DIRECTION;break;
    1836:	e7 e3       	ldi	r30, 0x37	; 55
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	80 83       	st	Z, r24
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTC: DDRC=Copy_u8DIRECTION;break;
    1840:	e4 e3       	ldi	r30, 0x34	; 52
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	80 83       	st	Z, r24
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <DIO_voidSetPortDirection+0x7a>
					case DIO_PORTD: DDRD=Copy_u8DIRECTION;break;
    184a:	e1 e3       	ldi	r30, 0x31	; 49
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	80 83       	st	Z, r24
					}


				}

			}
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <DIO_voidSetPortValue>:




			void DIO_voidSetPortValue(u8 Copy_u8PORT,u8 Copy_u8VALUE)
			{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <DIO_voidSetPortValue+0x6>
    1866:	00 d0       	rcall	.+0      	; 0x1868 <DIO_voidSetPortValue+0x8>
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	6a 83       	std	Y+2, r22	; 0x02
				if((DIO_PORTD>=Copy_u8PORT)&&(255>=Copy_u8VALUE||PORT_VAL_HIGH==Copy_u8VALUE||PORT_VAL_LOW==Copy_u8VALUE))
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	90 f5       	brcc	.+100    	; 0x18da <DIO_voidSetPortValue+0x7a>
					{
						switch(Copy_u8PORT)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	3c 83       	std	Y+4, r19	; 0x04
    187e:	2b 83       	std	Y+3, r18	; 0x03
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	81 30       	cpi	r24, 0x01	; 1
    1886:	91 05       	cpc	r25, r1
    1888:	d1 f0       	breq	.+52     	; 0x18be <DIO_voidSetPortValue+0x5e>
    188a:	2b 81       	ldd	r18, Y+3	; 0x03
    188c:	3c 81       	ldd	r19, Y+4	; 0x04
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	2c f4       	brge	.+10     	; 0x189e <DIO_voidSetPortValue+0x3e>
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	9c 81       	ldd	r25, Y+4	; 0x04
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	61 f0       	breq	.+24     	; 0x18b4 <DIO_voidSetPortValue+0x54>
    189c:	1e c0       	rjmp	.+60     	; 0x18da <DIO_voidSetPortValue+0x7a>
    189e:	2b 81       	ldd	r18, Y+3	; 0x03
    18a0:	3c 81       	ldd	r19, Y+4	; 0x04
    18a2:	22 30       	cpi	r18, 0x02	; 2
    18a4:	31 05       	cpc	r19, r1
    18a6:	81 f0       	breq	.+32     	; 0x18c8 <DIO_voidSetPortValue+0x68>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	83 30       	cpi	r24, 0x03	; 3
    18ae:	91 05       	cpc	r25, r1
    18b0:	81 f0       	breq	.+32     	; 0x18d2 <DIO_voidSetPortValue+0x72>
    18b2:	13 c0       	rjmp	.+38     	; 0x18da <DIO_voidSetPortValue+0x7a>
						{
						case DIO_PORTA: PORTA= Copy_u8VALUE;break;
    18b4:	eb e3       	ldi	r30, 0x3B	; 59
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	80 83       	st	Z, r24
    18bc:	0e c0       	rjmp	.+28     	; 0x18da <DIO_voidSetPortValue+0x7a>
						case DIO_PORTB: PORTB= Copy_u8VALUE;break;
    18be:	e8 e3       	ldi	r30, 0x38	; 56
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	80 83       	st	Z, r24
    18c6:	09 c0       	rjmp	.+18     	; 0x18da <DIO_voidSetPortValue+0x7a>
						case DIO_PORTC: PORTC= Copy_u8VALUE;break;
    18c8:	e5 e3       	ldi	r30, 0x35	; 53
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	80 83       	st	Z, r24
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <DIO_voidSetPortValue+0x7a>
						case DIO_PORTD: PORTD= Copy_u8VALUE;break;
    18d2:	e2 e3       	ldi	r30, 0x32	; 50
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	80 83       	st	Z, r24

						}

					}

			}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <DIO_voidTogglePortValue>:



			void DIO_voidTogglePortValue(u8 Copy_u8PORT)
			{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <DIO_voidTogglePortValue+0x6>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	89 83       	std	Y+1, r24	; 0x01
				if(DIO_PORTD>=Copy_u8PORT)
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <DIO_voidTogglePortValue+0x16>
    18fc:	3e c0       	rjmp	.+124    	; 0x197a <DIO_voidTogglePortValue+0x92>
				{
					switch(Copy_u8PORT)
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	3b 83       	std	Y+3, r19	; 0x03
    1906:	2a 83       	std	Y+2, r18	; 0x02
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 05       	cpc	r25, r1
    1910:	e9 f0       	breq	.+58     	; 0x194c <DIO_voidTogglePortValue+0x64>
    1912:	2a 81       	ldd	r18, Y+2	; 0x02
    1914:	3b 81       	ldd	r19, Y+3	; 0x03
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	2c f4       	brge	.+10     	; 0x1926 <DIO_voidTogglePortValue+0x3e>
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	61 f0       	breq	.+24     	; 0x193c <DIO_voidTogglePortValue+0x54>
    1924:	2a c0       	rjmp	.+84     	; 0x197a <DIO_voidTogglePortValue+0x92>
    1926:	2a 81       	ldd	r18, Y+2	; 0x02
    1928:	3b 81       	ldd	r19, Y+3	; 0x03
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	31 05       	cpc	r19, r1
    192e:	b1 f0       	breq	.+44     	; 0x195c <DIO_voidTogglePortValue+0x74>
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	c9 f0       	breq	.+50     	; 0x196c <DIO_voidTogglePortValue+0x84>
    193a:	1f c0       	rjmp	.+62     	; 0x197a <DIO_voidTogglePortValue+0x92>
					{
					case DIO_PORTA: PORTA=~PORTA;break;
    193c:	ab e3       	ldi	r26, 0x3B	; 59
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e3       	ldi	r30, 0x3B	; 59
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 95       	com	r24
    1948:	8c 93       	st	X, r24
    194a:	17 c0       	rjmp	.+46     	; 0x197a <DIO_voidTogglePortValue+0x92>
					case DIO_PORTB: PORTB=~PORTB;break;
    194c:	a8 e3       	ldi	r26, 0x38	; 56
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	80 95       	com	r24
    1958:	8c 93       	st	X, r24
    195a:	0f c0       	rjmp	.+30     	; 0x197a <DIO_voidTogglePortValue+0x92>
					case DIO_PORTC: PORTC=~PORTC;break;
    195c:	a5 e3       	ldi	r26, 0x35	; 53
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e5 e3       	ldi	r30, 0x35	; 53
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 95       	com	r24
    1968:	8c 93       	st	X, r24
    196a:	07 c0       	rjmp	.+14     	; 0x197a <DIO_voidTogglePortValue+0x92>
					case DIO_PORTD: PORTD=~PORTD;break;
    196c:	a2 e3       	ldi	r26, 0x32	; 50
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e2 e3       	ldi	r30, 0x32	; 50
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	80 95       	com	r24
    1978:	8c 93       	st	X, r24



				}

			}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <DIO_voidClearPortValue>:


			void DIO_voidClearPortValue(u8 Copy_u8PORT)
			{
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	00 d0       	rcall	.+0      	; 0x198c <DIO_voidClearPortValue+0x6>
    198c:	0f 92       	push	r0
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	89 83       	std	Y+1, r24	; 0x01

				if(DIO_PORTD>=Copy_u8PORT)
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	70 f5       	brcc	.+92     	; 0x19f6 <DIO_voidClearPortValue+0x70>
						{
							switch(Copy_u8PORT)
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3b 83       	std	Y+3, r19	; 0x03
    19a2:	2a 83       	std	Y+2, r18	; 0x02
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	91 05       	cpc	r25, r1
    19ac:	c9 f0       	breq	.+50     	; 0x19e0 <DIO_voidClearPortValue+0x5a>
    19ae:	2a 81       	ldd	r18, Y+2	; 0x02
    19b0:	3b 81       	ldd	r19, Y+3	; 0x03
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	2c f4       	brge	.+10     	; 0x19c2 <DIO_voidClearPortValue+0x3c>
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	00 97       	sbiw	r24, 0x00	; 0
    19be:	61 f0       	breq	.+24     	; 0x19d8 <DIO_voidClearPortValue+0x52>
    19c0:	1a c0       	rjmp	.+52     	; 0x19f6 <DIO_voidClearPortValue+0x70>
    19c2:	2a 81       	ldd	r18, Y+2	; 0x02
    19c4:	3b 81       	ldd	r19, Y+3	; 0x03
    19c6:	22 30       	cpi	r18, 0x02	; 2
    19c8:	31 05       	cpc	r19, r1
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <DIO_voidClearPortValue+0x62>
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	83 30       	cpi	r24, 0x03	; 3
    19d2:	91 05       	cpc	r25, r1
    19d4:	69 f0       	breq	.+26     	; 0x19f0 <DIO_voidClearPortValue+0x6a>
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <DIO_voidClearPortValue+0x70>
							{
							case DIO_PORTA: PORTA=PORT_VAL_LOW;break;
    19d8:	eb e3       	ldi	r30, 0x3B	; 59
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	10 82       	st	Z, r1
    19de:	0b c0       	rjmp	.+22     	; 0x19f6 <DIO_voidClearPortValue+0x70>
							case DIO_PORTB: PORTB=PORT_VAL_LOW;break;
    19e0:	e8 e3       	ldi	r30, 0x38	; 56
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	10 82       	st	Z, r1
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <DIO_voidClearPortValue+0x70>
							case DIO_PORTC: PORTC=PORT_VAL_LOW;break;
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	10 82       	st	Z, r1
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <DIO_voidClearPortValue+0x70>
							case DIO_PORTD: PORTD=PORT_VAL_LOW;break;
    19f0:	e2 e3       	ldi	r30, 0x32	; 50
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	10 82       	st	Z, r1


						}


			}
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	08 95       	ret

00001a02 <DIO_voidSetPinDirection>:

			/*************************************************************PIN FUNCTIONS****************************************************************/


			void DIO_voidSetPinDirection(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8DIRECTION)
			{
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	27 97       	sbiw	r28, 0x07	; 7
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	6a 83       	std	Y+2, r22	; 0x02
    1a1a:	4b 83       	std	Y+3, r20	; 0x03
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	84 30       	cpi	r24, 0x04	; 4
    1a20:	08 f0       	brcs	.+2      	; 0x1a24 <DIO_voidSetPinDirection+0x22>
    1a22:	ee c0       	rjmp	.+476    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	88 30       	cpi	r24, 0x08	; 8
    1a28:	08 f0       	brcs	.+2      	; 0x1a2c <DIO_voidSetPinDirection+0x2a>
    1a2a:	ea c0       	rjmp	.+468    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
				{
					if(PIN_DIR_INPUT==Copy_u8DIRECTION)
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 23       	and	r24, r24
    1a30:	09 f0       	breq	.+2      	; 0x1a34 <DIO_voidSetPinDirection+0x32>
    1a32:	74 c0       	rjmp	.+232    	; 0x1b1c <DIO_voidSetPinDirection+0x11a>
					{
						switch(Copy_u8PORT)
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	3f 83       	std	Y+7, r19	; 0x07
    1a3c:	2e 83       	std	Y+6, r18	; 0x06
    1a3e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a40:	9f 81       	ldd	r25, Y+7	; 0x07
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	91 05       	cpc	r25, r1
    1a46:	59 f1       	breq	.+86     	; 0x1a9e <DIO_voidSetPinDirection+0x9c>
    1a48:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4c:	22 30       	cpi	r18, 0x02	; 2
    1a4e:	31 05       	cpc	r19, r1
    1a50:	2c f4       	brge	.+10     	; 0x1a5c <DIO_voidSetPinDirection+0x5a>
    1a52:	8e 81       	ldd	r24, Y+6	; 0x06
    1a54:	9f 81       	ldd	r25, Y+7	; 0x07
    1a56:	00 97       	sbiw	r24, 0x00	; 0
    1a58:	69 f0       	breq	.+26     	; 0x1a74 <DIO_voidSetPinDirection+0x72>
    1a5a:	d2 c0       	rjmp	.+420    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
    1a5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1a5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1a60:	22 30       	cpi	r18, 0x02	; 2
    1a62:	31 05       	cpc	r19, r1
    1a64:	89 f1       	breq	.+98     	; 0x1ac8 <DIO_voidSetPinDirection+0xc6>
    1a66:	8e 81       	ldd	r24, Y+6	; 0x06
    1a68:	9f 81       	ldd	r25, Y+7	; 0x07
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <DIO_voidSetPinDirection+0x70>
    1a70:	40 c0       	rjmp	.+128    	; 0x1af2 <DIO_voidSetPinDirection+0xf0>
    1a72:	c6 c0       	rjmp	.+396    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
						{
						case DIO_PORTA:CLR_BIT(DDRA,Copy_u8PIN);break;
    1a74:	aa e3       	ldi	r26, 0x3A	; 58
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	ea e3       	ldi	r30, 0x3A	; 58
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	48 2f       	mov	r20, r24
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	02 2e       	mov	r0, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <DIO_voidSetPinDirection+0x90>
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	0a 94       	dec	r0
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <DIO_voidSetPinDirection+0x8c>
    1a96:	80 95       	com	r24
    1a98:	84 23       	and	r24, r20
    1a9a:	8c 93       	st	X, r24
    1a9c:	b1 c0       	rjmp	.+354    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTB:CLR_BIT(DDRB,Copy_u8PIN);break;
    1a9e:	a7 e3       	ldi	r26, 0x37	; 55
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e7 e3       	ldi	r30, 0x37	; 55
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_voidSetPinDirection+0xba>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_voidSetPinDirection+0xb6>
    1ac0:	80 95       	com	r24
    1ac2:	84 23       	and	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	9c c0       	rjmp	.+312    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTC:CLR_BIT(DDRC,Copy_u8PIN);break;
    1ac8:	a4 e3       	ldi	r26, 0x34	; 52
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e4 e3       	ldi	r30, 0x34	; 52
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_voidSetPinDirection+0xe4>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <DIO_voidSetPinDirection+0xe0>
    1aea:	80 95       	com	r24
    1aec:	84 23       	and	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	87 c0       	rjmp	.+270    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
						case DIO_PORTD:CLR_BIT(DDRD,Copy_u8PIN);break;
    1af2:	a1 e3       	ldi	r26, 0x31	; 49
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e1 e3       	ldi	r30, 0x31	; 49
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <DIO_voidSetPinDirection+0x10e>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <DIO_voidSetPinDirection+0x10a>
    1b14:	80 95       	com	r24
    1b16:	84 23       	and	r24, r20
    1b18:	8c 93       	st	X, r24
    1b1a:	72 c0       	rjmp	.+228    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>

						}

					}

					else if(PIN_DIR_OUTPUT==Copy_u8DIRECTION)
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	81 30       	cpi	r24, 0x01	; 1
    1b20:	09 f0       	breq	.+2      	; 0x1b24 <DIO_voidSetPinDirection+0x122>
    1b22:	6e c0       	rjmp	.+220    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
					{
						switch(Copy_u8PORT)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	3d 83       	std	Y+5, r19	; 0x05
    1b2c:	2c 83       	std	Y+4, r18	; 0x04
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	91 05       	cpc	r25, r1
    1b36:	49 f1       	breq	.+82     	; 0x1b8a <DIO_voidSetPinDirection+0x188>
    1b38:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <DIO_voidSetPinDirection+0x14a>
    1b42:	8c 81       	ldd	r24, Y+4	; 0x04
    1b44:	9d 81       	ldd	r25, Y+5	; 0x05
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	61 f0       	breq	.+24     	; 0x1b62 <DIO_voidSetPinDirection+0x160>
    1b4a:	5a c0       	rjmp	.+180    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
    1b4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	71 f1       	breq	.+92     	; 0x1bb2 <DIO_voidSetPinDirection+0x1b0>
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	e9 f1       	breq	.+122    	; 0x1bda <DIO_voidSetPinDirection+0x1d8>
    1b60:	4f c0       	rjmp	.+158    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
									{
									case DIO_PORTA:SET_BIT(DDRA,Copy_u8PIN);break;
    1b62:	aa e3       	ldi	r26, 0x3A	; 58
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	ea e3       	ldi	r30, 0x3A	; 58
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_voidSetPinDirection+0x17e>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_voidSetPinDirection+0x17a>
    1b84:	84 2b       	or	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	3b c0       	rjmp	.+118    	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTB:SET_BIT(DDRB,Copy_u8PIN);break;
    1b8a:	a7 e3       	ldi	r26, 0x37	; 55
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e7 e3       	ldi	r30, 0x37	; 55
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_voidSetPinDirection+0x1a6>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_voidSetPinDirection+0x1a2>
    1bac:	84 2b       	or	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	27 c0       	rjmp	.+78     	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTC:SET_BIT(DDRC,Copy_u8PIN);break;
    1bb2:	a4 e3       	ldi	r26, 0x34	; 52
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e4 e3       	ldi	r30, 0x34	; 52
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_voidSetPinDirection+0x1ce>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_voidSetPinDirection+0x1ca>
    1bd4:	84 2b       	or	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	13 c0       	rjmp	.+38     	; 0x1c00 <DIO_voidSetPinDirection+0x1fe>
									case DIO_PORTD:SET_BIT(DDRD,Copy_u8PIN);break;
    1bda:	a1 e3       	ldi	r26, 0x31	; 49
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e1 e3       	ldi	r30, 0x31	; 49
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_voidSetPinDirection+0x1f6>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_voidSetPinDirection+0x1f2>
    1bfc:	84 2b       	or	r24, r20
    1bfe:	8c 93       	st	X, r24

				}



			}
    1c00:	27 96       	adiw	r28, 0x07	; 7
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <DIO_voidSetPinValue>:




			void DIO_voidSetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8VALUE)
			{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	27 97       	sbiw	r28, 0x07	; 7
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	6a 83       	std	Y+2, r22	; 0x02
    1c2a:	4b 83       	std	Y+3, r20	; 0x03

			if(DIO_PORTD>=Copy_u8PORT&&DIO_PIN7>=Copy_u8PIN&&(255<=Copy_u8VALUE||PIN_VAL_HIGH==Copy_u8VALUE||PIN_VAL_LOW==Copy_u8VALUE))
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <DIO_voidSetPinValue+0x22>
    1c32:	f8 c0       	rjmp	.+496    	; 0x1e24 <DIO_voidSetPinValue+0x212>
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	88 30       	cpi	r24, 0x08	; 8
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <DIO_voidSetPinValue+0x2a>
    1c3a:	f4 c0       	rjmp	.+488    	; 0x1e24 <DIO_voidSetPinValue+0x212>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c40:	39 f0       	breq	.+14     	; 0x1c50 <DIO_voidSetPinValue+0x3e>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	21 f0       	breq	.+8      	; 0x1c50 <DIO_voidSetPinValue+0x3e>
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	88 23       	and	r24, r24
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <DIO_voidSetPinValue+0x3e>
    1c4e:	ea c0       	rjmp	.+468    	; 0x1e24 <DIO_voidSetPinValue+0x212>
			{
				if(PIN_VAL_HIGH==Copy_u8VALUE)
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <DIO_voidSetPinValue+0x46>
    1c56:	6f c0       	rjmp	.+222    	; 0x1d36 <DIO_voidSetPinValue+0x124>
				{
					switch(Copy_u8PORT)
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	3f 83       	std	Y+7, r19	; 0x07
    1c60:	2e 83       	std	Y+6, r18	; 0x06
    1c62:	8e 81       	ldd	r24, Y+6	; 0x06
    1c64:	9f 81       	ldd	r25, Y+7	; 0x07
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	91 05       	cpc	r25, r1
    1c6a:	49 f1       	breq	.+82     	; 0x1cbe <DIO_voidSetPinValue+0xac>
    1c6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	2c f4       	brge	.+10     	; 0x1c80 <DIO_voidSetPinValue+0x6e>
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
    1c78:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7a:	00 97       	sbiw	r24, 0x00	; 0
    1c7c:	61 f0       	breq	.+24     	; 0x1c96 <DIO_voidSetPinValue+0x84>
    1c7e:	d2 c0       	rjmp	.+420    	; 0x1e24 <DIO_voidSetPinValue+0x212>
    1c80:	2e 81       	ldd	r18, Y+6	; 0x06
    1c82:	3f 81       	ldd	r19, Y+7	; 0x07
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	71 f1       	breq	.+92     	; 0x1ce6 <DIO_voidSetPinValue+0xd4>
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8e:	83 30       	cpi	r24, 0x03	; 3
    1c90:	91 05       	cpc	r25, r1
    1c92:	e9 f1       	breq	.+122    	; 0x1d0e <DIO_voidSetPinValue+0xfc>
    1c94:	c7 c0       	rjmp	.+398    	; 0x1e24 <DIO_voidSetPinValue+0x212>
											{
											case DIO_PORTA:SET_BIT(PORTA,Copy_u8PIN);break;
    1c96:	ab e3       	ldi	r26, 0x3B	; 59
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	eb e3       	ldi	r30, 0x3B	; 59
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_voidSetPinValue+0xa2>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_voidSetPinValue+0x9e>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	b3 c0       	rjmp	.+358    	; 0x1e24 <DIO_voidSetPinValue+0x212>
											case DIO_PORTB:SET_BIT(PORTB,Copy_u8PIN);break;
    1cbe:	a8 e3       	ldi	r26, 0x38	; 56
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e8 e3       	ldi	r30, 0x38	; 56
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_voidSetPinValue+0xca>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_voidSetPinValue+0xc6>
    1ce0:	84 2b       	or	r24, r20
    1ce2:	8c 93       	st	X, r24
    1ce4:	9f c0       	rjmp	.+318    	; 0x1e24 <DIO_voidSetPinValue+0x212>
											case DIO_PORTC:SET_BIT(PORTC,Copy_u8PIN);break;
    1ce6:	a5 e3       	ldi	r26, 0x35	; 53
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e5 e3       	ldi	r30, 0x35	; 53
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_voidSetPinValue+0xf2>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_voidSetPinValue+0xee>
    1d08:	84 2b       	or	r24, r20
    1d0a:	8c 93       	st	X, r24
    1d0c:	8b c0       	rjmp	.+278    	; 0x1e24 <DIO_voidSetPinValue+0x212>
											case DIO_PORTD:SET_BIT(PORTD,Copy_u8PIN);break;
    1d0e:	a2 e3       	ldi	r26, 0x32	; 50
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e2 e3       	ldi	r30, 0x32	; 50
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	48 2f       	mov	r20, r24
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	02 2e       	mov	r0, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_voidSetPinValue+0x11a>
    1d28:	88 0f       	add	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	0a 94       	dec	r0
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_voidSetPinValue+0x116>
    1d30:	84 2b       	or	r24, r20
    1d32:	8c 93       	st	X, r24
    1d34:	77 c0       	rjmp	.+238    	; 0x1e24 <DIO_voidSetPinValue+0x212>
											}


				}

				else if(PIN_VAL_LOW==Copy_u8VALUE)
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	88 23       	and	r24, r24
    1d3a:	09 f0       	breq	.+2      	; 0x1d3e <DIO_voidSetPinValue+0x12c>
    1d3c:	73 c0       	rjmp	.+230    	; 0x1e24 <DIO_voidSetPinValue+0x212>
				{
					switch(Copy_u8PORT)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	3d 83       	std	Y+5, r19	; 0x05
    1d46:	2c 83       	std	Y+4, r18	; 0x04
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4c:	81 30       	cpi	r24, 0x01	; 1
    1d4e:	91 05       	cpc	r25, r1
    1d50:	59 f1       	breq	.+86     	; 0x1da8 <DIO_voidSetPinValue+0x196>
    1d52:	2c 81       	ldd	r18, Y+4	; 0x04
    1d54:	3d 81       	ldd	r19, Y+5	; 0x05
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <DIO_voidSetPinValue+0x154>
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f0       	breq	.+26     	; 0x1d7e <DIO_voidSetPinValue+0x16c>
    1d64:	5f c0       	rjmp	.+190    	; 0x1e24 <DIO_voidSetPinValue+0x212>
    1d66:	2c 81       	ldd	r18, Y+4	; 0x04
    1d68:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	89 f1       	breq	.+98     	; 0x1dd2 <DIO_voidSetPinValue+0x1c0>
    1d70:	8c 81       	ldd	r24, Y+4	; 0x04
    1d72:	9d 81       	ldd	r25, Y+5	; 0x05
    1d74:	83 30       	cpi	r24, 0x03	; 3
    1d76:	91 05       	cpc	r25, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <DIO_voidSetPinValue+0x16a>
    1d7a:	40 c0       	rjmp	.+128    	; 0x1dfc <DIO_voidSetPinValue+0x1ea>
    1d7c:	53 c0       	rjmp	.+166    	; 0x1e24 <DIO_voidSetPinValue+0x212>
								{
								case DIO_PORTA:CLR_BIT(PORTA,Copy_u8PIN);break;
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_voidSetPinValue+0x18a>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_voidSetPinValue+0x186>
    1da0:	80 95       	com	r24
    1da2:	84 23       	and	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	3e c0       	rjmp	.+124    	; 0x1e24 <DIO_voidSetPinValue+0x212>
								case DIO_PORTB:CLR_BIT(PORTB,Copy_u8PIN);break;
    1da8:	a8 e3       	ldi	r26, 0x38	; 56
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e8 e3       	ldi	r30, 0x38	; 56
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8a 81       	ldd	r24, Y+2	; 0x02
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_voidSetPinValue+0x1b4>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_voidSetPinValue+0x1b0>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	29 c0       	rjmp	.+82     	; 0x1e24 <DIO_voidSetPinValue+0x212>
								case DIO_PORTC:CLR_BIT(PORTC,Copy_u8PIN);break;
    1dd2:	a5 e3       	ldi	r26, 0x35	; 53
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e5 e3       	ldi	r30, 0x35	; 53
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	48 2f       	mov	r20, r24
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <DIO_voidSetPinValue+0x1de>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <DIO_voidSetPinValue+0x1da>
    1df4:	80 95       	com	r24
    1df6:	84 23       	and	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	14 c0       	rjmp	.+40     	; 0x1e24 <DIO_voidSetPinValue+0x212>
								case DIO_PORTD:CLR_BIT(PORTD,Copy_u8PIN);break;
    1dfc:	a2 e3       	ldi	r26, 0x32	; 50
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e2 e3       	ldi	r30, 0x32	; 50
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_voidSetPinValue+0x208>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_voidSetPinValue+0x204>
    1e1e:	80 95       	com	r24
    1e20:	84 23       	and	r24, r20
    1e22:	8c 93       	st	X, r24
				}

				}


			}
    1e24:	27 96       	adiw	r28, 0x07	; 7
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	f8 94       	cli
    1e2a:	de bf       	out	0x3e, r29	; 62
    1e2c:	0f be       	out	0x3f, r0	; 63
    1e2e:	cd bf       	out	0x3d, r28	; 61
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <DIO_voidGetPinValue>:




			u8 DIO_voidGetPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <DIO_voidGetPinValue+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <DIO_voidGetPinValue+0x8>
    1e3e:	0f 92       	push	r0
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	6b 83       	std	Y+3, r22	; 0x03
			  u8 LOC_u8RESULT=0;
    1e48:	19 82       	std	Y+1, r1	; 0x01
			  if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <DIO_voidGetPinValue+0x1c>
    1e50:	6b c0       	rjmp	.+214    	; 0x1f28 <DIO_voidGetPinValue+0xf2>
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 30       	cpi	r24, 0x08	; 8
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <DIO_voidGetPinValue+0x24>
    1e58:	67 c0       	rjmp	.+206    	; 0x1f28 <DIO_voidGetPinValue+0xf2>
			  {


				  switch(Copy_u8PORT)
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3d 83       	std	Y+5, r19	; 0x05
    1e62:	2c 83       	std	Y+4, r18	; 0x04
    1e64:	4c 81       	ldd	r20, Y+4	; 0x04
    1e66:	5d 81       	ldd	r21, Y+5	; 0x05
    1e68:	41 30       	cpi	r20, 0x01	; 1
    1e6a:	51 05       	cpc	r21, r1
    1e6c:	41 f1       	breq	.+80     	; 0x1ebe <DIO_voidGetPinValue+0x88>
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	82 30       	cpi	r24, 0x02	; 2
    1e74:	91 05       	cpc	r25, r1
    1e76:	34 f4       	brge	.+12     	; 0x1e84 <DIO_voidGetPinValue+0x4e>
    1e78:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7c:	21 15       	cp	r18, r1
    1e7e:	31 05       	cpc	r19, r1
    1e80:	61 f0       	breq	.+24     	; 0x1e9a <DIO_voidGetPinValue+0x64>
    1e82:	52 c0       	rjmp	.+164    	; 0x1f28 <DIO_voidGetPinValue+0xf2>
    1e84:	4c 81       	ldd	r20, Y+4	; 0x04
    1e86:	5d 81       	ldd	r21, Y+5	; 0x05
    1e88:	42 30       	cpi	r20, 0x02	; 2
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	51 f1       	breq	.+84     	; 0x1ee2 <DIO_voidGetPinValue+0xac>
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	9d 81       	ldd	r25, Y+5	; 0x05
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	91 05       	cpc	r25, r1
    1e96:	b9 f1       	breq	.+110    	; 0x1f06 <DIO_voidGetPinValue+0xd0>
    1e98:	47 c0       	rjmp	.+142    	; 0x1f28 <DIO_voidGetPinValue+0xf2>

				  {
					case DIO_PORTA:LOC_u8RESULT=GET_BIT(PINA,Copy_u8PIN);break;
    1e9a:	e9 e3       	ldi	r30, 0x39	; 57
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a9 01       	movw	r20, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <DIO_voidGetPinValue+0x7c>
    1eae:	55 95       	asr	r21
    1eb0:	47 95       	ror	r20
    1eb2:	8a 95       	dec	r24
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <DIO_voidGetPinValue+0x78>
    1eb6:	ca 01       	movw	r24, r20
    1eb8:	81 70       	andi	r24, 0x01	; 1
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	35 c0       	rjmp	.+106    	; 0x1f28 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTB:LOC_u8RESULT=GET_BIT(PINB,Copy_u8PIN);break;
    1ebe:	e6 e3       	ldi	r30, 0x36	; 54
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a9 01       	movw	r20, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_voidGetPinValue+0xa0>
    1ed2:	55 95       	asr	r21
    1ed4:	47 95       	ror	r20
    1ed6:	8a 95       	dec	r24
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <DIO_voidGetPinValue+0x9c>
    1eda:	ca 01       	movw	r24, r20
    1edc:	81 70       	andi	r24, 0x01	; 1
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	23 c0       	rjmp	.+70     	; 0x1f28 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTC:LOC_u8RESULT=GET_BIT(PINC,Copy_u8PIN);break;
    1ee2:	e3 e3       	ldi	r30, 0x33	; 51
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a9 01       	movw	r20, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_voidGetPinValue+0xc4>
    1ef6:	55 95       	asr	r21
    1ef8:	47 95       	ror	r20
    1efa:	8a 95       	dec	r24
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_voidGetPinValue+0xc0>
    1efe:	ca 01       	movw	r24, r20
    1f00:	81 70       	andi	r24, 0x01	; 1
    1f02:	89 83       	std	Y+1, r24	; 0x01
    1f04:	11 c0       	rjmp	.+34     	; 0x1f28 <DIO_voidGetPinValue+0xf2>
					case DIO_PORTD:LOC_u8RESULT=GET_BIT(PIND,Copy_u8PIN);break;
    1f06:	e0 e3       	ldi	r30, 0x30	; 48
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a9 01       	movw	r20, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_voidGetPinValue+0xe8>
    1f1a:	55 95       	asr	r21
    1f1c:	47 95       	ror	r20
    1f1e:	8a 95       	dec	r24
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_voidGetPinValue+0xe4>
    1f22:	ca 01       	movw	r24, r20
    1f24:	81 70       	andi	r24, 0x01	; 1
    1f26:	89 83       	std	Y+1, r24	; 0x01

				  }


				}
			  return LOC_u8RESULT;
    1f28:	89 81       	ldd	r24, Y+1	; 0x01


			}
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <DIO_voidTogglePinValue>:



			void DIO_voidTogglePinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <DIO_voidTogglePinValue+0x6>
    1f40:	00 d0       	rcall	.+0      	; 0x1f42 <DIO_voidTogglePinValue+0x8>
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	89 83       	std	Y+1, r24	; 0x01
    1f48:	6a 83       	std	Y+2, r22	; 0x02
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	84 30       	cpi	r24, 0x04	; 4
    1f4e:	08 f0       	brcs	.+2      	; 0x1f52 <DIO_voidTogglePinValue+0x18>
    1f50:	72 c0       	rjmp	.+228    	; 0x2036 <DIO_voidTogglePinValue+0xfc>
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	88 30       	cpi	r24, 0x08	; 8
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <DIO_voidTogglePinValue+0x20>
    1f58:	6e c0       	rjmp	.+220    	; 0x2036 <DIO_voidTogglePinValue+0xfc>
				  {
					switch(Copy_u8PORT)
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3c 83       	std	Y+4, r19	; 0x04
    1f62:	2b 83       	std	Y+3, r18	; 0x03
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	49 f1       	breq	.+82     	; 0x1fc0 <DIO_voidTogglePinValue+0x86>
    1f6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f70:	3c 81       	ldd	r19, Y+4	; 0x04
    1f72:	22 30       	cpi	r18, 0x02	; 2
    1f74:	31 05       	cpc	r19, r1
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <DIO_voidTogglePinValue+0x48>
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <DIO_voidTogglePinValue+0x5e>
    1f80:	5a c0       	rjmp	.+180    	; 0x2036 <DIO_voidTogglePinValue+0xfc>
    1f82:	2b 81       	ldd	r18, Y+3	; 0x03
    1f84:	3c 81       	ldd	r19, Y+4	; 0x04
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	31 05       	cpc	r19, r1
    1f8a:	71 f1       	breq	.+92     	; 0x1fe8 <DIO_voidTogglePinValue+0xae>
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	91 05       	cpc	r25, r1
    1f94:	e9 f1       	breq	.+122    	; 0x2010 <DIO_voidTogglePinValue+0xd6>
    1f96:	4f c0       	rjmp	.+158    	; 0x2036 <DIO_voidTogglePinValue+0xfc>
							{
							case DIO_PORTA:TOG_BIT(PORTA, Copy_u8PIN) ;break;
    1f98:	ab e3       	ldi	r26, 0x3B	; 59
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e3       	ldi	r30, 0x3B	; 59
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <DIO_voidTogglePinValue+0x7c>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <DIO_voidTogglePinValue+0x78>
    1fba:	84 27       	eor	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	3b c0       	rjmp	.+118    	; 0x2036 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTB:TOG_BIT(PORTB, Copy_u8PIN) ;break;
    1fc0:	a8 e3       	ldi	r26, 0x38	; 56
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e8 e3       	ldi	r30, 0x38	; 56
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <DIO_voidTogglePinValue+0xa4>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <DIO_voidTogglePinValue+0xa0>
    1fe2:	84 27       	eor	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	27 c0       	rjmp	.+78     	; 0x2036 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTC:TOG_BIT(PORTC, Copy_u8PIN) ;break;
    1fe8:	a5 e3       	ldi	r26, 0x35	; 53
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e3       	ldi	r30, 0x35	; 53
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_voidTogglePinValue+0xcc>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_voidTogglePinValue+0xc8>
    200a:	84 27       	eor	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	13 c0       	rjmp	.+38     	; 0x2036 <DIO_voidTogglePinValue+0xfc>
							case DIO_PORTD:TOG_BIT(PORTD, Copy_u8PIN) ;break;
    2010:	a2 e3       	ldi	r26, 0x32	; 50
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e2 e3       	ldi	r30, 0x32	; 50
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_voidTogglePinValue+0xf4>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_voidTogglePinValue+0xf0>
    2032:	84 27       	eor	r24, r20
    2034:	8c 93       	st	X, r24





			}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <DIO_voidClearPinValue>:



			void DIO_voidClearPinValue(u8 Copy_u8PORT,u8 Copy_u8PIN)
			{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	00 d0       	rcall	.+0      	; 0x204a <DIO_voidClearPinValue+0x6>
    204a:	00 d0       	rcall	.+0      	; 0x204c <DIO_voidClearPinValue+0x8>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	89 83       	std	Y+1, r24	; 0x01
    2052:	6a 83       	std	Y+2, r22	; 0x02

				 if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	84 30       	cpi	r24, 0x04	; 4
    2058:	08 f0       	brcs	.+2      	; 0x205c <DIO_voidClearPinValue+0x18>
    205a:	77 c0       	rjmp	.+238    	; 0x214a <DIO_voidClearPinValue+0x106>
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 30       	cpi	r24, 0x08	; 8
    2060:	08 f0       	brcs	.+2      	; 0x2064 <DIO_voidClearPinValue+0x20>
    2062:	73 c0       	rjmp	.+230    	; 0x214a <DIO_voidClearPinValue+0x106>
					  {

					 switch(Copy_u8PORT)
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3c 83       	std	Y+4, r19	; 0x04
    206c:	2b 83       	std	Y+3, r18	; 0x03
    206e:	8b 81       	ldd	r24, Y+3	; 0x03
    2070:	9c 81       	ldd	r25, Y+4	; 0x04
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	91 05       	cpc	r25, r1
    2076:	59 f1       	breq	.+86     	; 0x20ce <DIO_voidClearPinValue+0x8a>
    2078:	2b 81       	ldd	r18, Y+3	; 0x03
    207a:	3c 81       	ldd	r19, Y+4	; 0x04
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	31 05       	cpc	r19, r1
    2080:	2c f4       	brge	.+10     	; 0x208c <DIO_voidClearPinValue+0x48>
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	9c 81       	ldd	r25, Y+4	; 0x04
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	69 f0       	breq	.+26     	; 0x20a4 <DIO_voidClearPinValue+0x60>
    208a:	5f c0       	rjmp	.+190    	; 0x214a <DIO_voidClearPinValue+0x106>
    208c:	2b 81       	ldd	r18, Y+3	; 0x03
    208e:	3c 81       	ldd	r19, Y+4	; 0x04
    2090:	22 30       	cpi	r18, 0x02	; 2
    2092:	31 05       	cpc	r19, r1
    2094:	89 f1       	breq	.+98     	; 0x20f8 <DIO_voidClearPinValue+0xb4>
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	9c 81       	ldd	r25, Y+4	; 0x04
    209a:	83 30       	cpi	r24, 0x03	; 3
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <DIO_voidClearPinValue+0x5e>
    20a0:	40 c0       	rjmp	.+128    	; 0x2122 <DIO_voidClearPinValue+0xde>
    20a2:	53 c0       	rjmp	.+166    	; 0x214a <DIO_voidClearPinValue+0x106>
					{
						case DIO_PORTA:CLR_BIT(PORTA,Copy_u8PIN);break;
    20a4:	ab e3       	ldi	r26, 0x3B	; 59
    20a6:	b0 e0       	ldi	r27, 0x00	; 0
    20a8:	eb e3       	ldi	r30, 0x3B	; 59
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	80 81       	ld	r24, Z
    20ae:	48 2f       	mov	r20, r24
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	02 2e       	mov	r0, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <DIO_voidClearPinValue+0x7e>
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	0a 94       	dec	r0
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <DIO_voidClearPinValue+0x7a>
    20c6:	80 95       	com	r24
    20c8:	84 23       	and	r24, r20
    20ca:	8c 93       	st	X, r24
    20cc:	3e c0       	rjmp	.+124    	; 0x214a <DIO_voidClearPinValue+0x106>
						case DIO_PORTB:CLR_BIT(PORTB,Copy_u8PIN);break;
    20ce:	a8 e3       	ldi	r26, 0x38	; 56
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e8 e3       	ldi	r30, 0x38	; 56
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	48 2f       	mov	r20, r24
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	02 2e       	mov	r0, r18
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_voidClearPinValue+0xa8>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	0a 94       	dec	r0
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <DIO_voidClearPinValue+0xa4>
    20f0:	80 95       	com	r24
    20f2:	84 23       	and	r24, r20
    20f4:	8c 93       	st	X, r24
    20f6:	29 c0       	rjmp	.+82     	; 0x214a <DIO_voidClearPinValue+0x106>
						case DIO_PORTC:CLR_BIT(PORTC,Copy_u8PIN);break;
    20f8:	a5 e3       	ldi	r26, 0x35	; 53
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e5 e3       	ldi	r30, 0x35	; 53
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <DIO_voidClearPinValue+0xd2>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <DIO_voidClearPinValue+0xce>
    211a:	80 95       	com	r24
    211c:	84 23       	and	r24, r20
    211e:	8c 93       	st	X, r24
    2120:	14 c0       	rjmp	.+40     	; 0x214a <DIO_voidClearPinValue+0x106>
						case DIO_PORTD:CLR_BIT(PORTD,Copy_u8PIN);break;
    2122:	a2 e3       	ldi	r26, 0x32	; 50
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e2 e3       	ldi	r30, 0x32	; 50
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	48 2f       	mov	r20, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	02 2e       	mov	r0, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <DIO_voidClearPinValue+0xfc>
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	0a 94       	dec	r0
    2142:	e2 f7       	brpl	.-8      	; 0x213c <DIO_voidClearPinValue+0xf8>
    2144:	80 95       	com	r24
    2146:	84 23       	and	r24, r20
    2148:	8c 93       	st	X, r24


					  }


			}
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <DIO_voidConnectPullUp>:




			void DIO_voidConnectPullUp(u8 Copy_u8PORT,u8 Copy_u8PIN,u8 Copy_u8ConnectPullUp)
			{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <DIO_voidConnectPullUp+0x6>
    215e:	00 d0       	rcall	.+0      	; 0x2160 <DIO_voidConnectPullUp+0x8>
    2160:	0f 92       	push	r0
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	6a 83       	std	Y+2, r22	; 0x02
    216a:	4b 83       	std	Y+3, r20	; 0x03
				if((DIO_PORTD>=Copy_u8PORT)&&(DIO_PIN7>=Copy_u8PIN))
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	84 30       	cpi	r24, 0x04	; 4
    2170:	08 f0       	brcs	.+2      	; 0x2174 <DIO_voidConnectPullUp+0x1c>
    2172:	3d c1       	rjmp	.+634    	; 0x23ee <DIO_voidConnectPullUp+0x296>
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	88 30       	cpi	r24, 0x08	; 8
    2178:	08 f0       	brcs	.+2      	; 0x217c <DIO_voidConnectPullUp+0x24>
    217a:	39 c1       	rjmp	.+626    	; 0x23ee <DIO_voidConnectPullUp+0x296>
				{
					switch(Copy_u8PORT)
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	3d 83       	std	Y+5, r19	; 0x05
    2184:	2c 83       	std	Y+4, r18	; 0x04
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	91 05       	cpc	r25, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <DIO_voidConnectPullUp+0x3a>
    2190:	5d c0       	rjmp	.+186    	; 0x224c <DIO_voidConnectPullUp+0xf4>
    2192:	2c 81       	ldd	r18, Y+4	; 0x04
    2194:	3d 81       	ldd	r19, Y+5	; 0x05
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <DIO_voidConnectPullUp+0x4e>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	71 f0       	breq	.+28     	; 0x21c0 <DIO_voidConnectPullUp+0x68>
    21a4:	24 c1       	rjmp	.+584    	; 0x23ee <DIO_voidConnectPullUp+0x296>
    21a6:	2c 81       	ldd	r18, Y+4	; 0x04
    21a8:	3d 81       	ldd	r19, Y+5	; 0x05
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	09 f4       	brne	.+2      	; 0x21b2 <DIO_voidConnectPullUp+0x5a>
    21b0:	93 c0       	rjmp	.+294    	; 0x22d8 <DIO_voidConnectPullUp+0x180>
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	91 05       	cpc	r25, r1
    21ba:	09 f4       	brne	.+2      	; 0x21be <DIO_voidConnectPullUp+0x66>
    21bc:	d3 c0       	rjmp	.+422    	; 0x2364 <DIO_voidConnectPullUp+0x20c>
    21be:	17 c1       	rjmp	.+558    	; 0x23ee <DIO_voidConnectPullUp+0x296>
					{
					case DIO_PORTA:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	71 f5       	brne	.+92     	; 0x2222 <DIO_voidConnectPullUp+0xca>
						{
							SET_BIT(PORTA,Copy_u8PIN);
    21c6:	ab e3       	ldi	r26, 0x3B	; 59
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	eb e3       	ldi	r30, 0x3B	; 59
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	48 2f       	mov	r20, r24
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <DIO_voidConnectPullUp+0x8a>
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	2a 95       	dec	r18
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <DIO_voidConnectPullUp+0x86>
    21e6:	84 2b       	or	r24, r20
    21e8:	8c 93       	st	X, r24
							CLR_BIT(DDRA,Copy_u8PIN);
    21ea:	aa e3       	ldi	r26, 0x3A	; 58
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	ea e3       	ldi	r30, 0x3A	; 58
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_voidConnectPullUp+0xb0>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_voidConnectPullUp+0xac>
    220c:	80 95       	com	r24
    220e:	84 23       	and	r24, r20
    2210:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    2212:	a0 e5       	ldi	r26, 0x50	; 80
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e0 e5       	ldi	r30, 0x50	; 80
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8b 7f       	andi	r24, 0xFB	; 251
    221e:	8c 93       	st	X, r24
    2220:	e6 c0       	rjmp	.+460    	; 0x23ee <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTA,Copy_u8PIN);
    2222:	ab e3       	ldi	r26, 0x3B	; 59
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	eb e3       	ldi	r30, 0x3B	; 59
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <DIO_voidConnectPullUp+0xe8>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <DIO_voidConnectPullUp+0xe4>
    2244:	80 95       	com	r24
    2246:	84 23       	and	r24, r20
    2248:	8c 93       	st	X, r24
    224a:	d1 c0       	rjmp	.+418    	; 0x23ee <DIO_voidConnectPullUp+0x296>
						break;



		             case DIO_PORTB:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	81 30       	cpi	r24, 0x01	; 1
    2250:	71 f5       	brne	.+92     	; 0x22ae <DIO_voidConnectPullUp+0x156>
						{
							SET_BIT(PORTB,Copy_u8PIN);
    2252:	a8 e3       	ldi	r26, 0x38	; 56
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e8 e3       	ldi	r30, 0x38	; 56
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	48 2f       	mov	r20, r24
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	02 c0       	rjmp	.+4      	; 0x226e <DIO_voidConnectPullUp+0x116>
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	2a 95       	dec	r18
    2270:	e2 f7       	brpl	.-8      	; 0x226a <DIO_voidConnectPullUp+0x112>
    2272:	84 2b       	or	r24, r20
    2274:	8c 93       	st	X, r24
							CLR_BIT(DDRB,Copy_u8PIN);
    2276:	a7 e3       	ldi	r26, 0x37	; 55
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	e7 e3       	ldi	r30, 0x37	; 55
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	48 2f       	mov	r20, r24
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 2e       	mov	r0, r18
    228e:	02 c0       	rjmp	.+4      	; 0x2294 <DIO_voidConnectPullUp+0x13c>
    2290:	88 0f       	add	r24, r24
    2292:	99 1f       	adc	r25, r25
    2294:	0a 94       	dec	r0
    2296:	e2 f7       	brpl	.-8      	; 0x2290 <DIO_voidConnectPullUp+0x138>
    2298:	80 95       	com	r24
    229a:	84 23       	and	r24, r20
    229c:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    229e:	a0 e5       	ldi	r26, 0x50	; 80
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	e0 e5       	ldi	r30, 0x50	; 80
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	8b 7f       	andi	r24, 0xFB	; 251
    22aa:	8c 93       	st	X, r24
    22ac:	a0 c0       	rjmp	.+320    	; 0x23ee <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTB,Copy_u8PIN);
    22ae:	a8 e3       	ldi	r26, 0x38	; 56
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e8 e3       	ldi	r30, 0x38	; 56
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	48 2f       	mov	r20, r24
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 2e       	mov	r0, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_voidConnectPullUp+0x174>
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	0a 94       	dec	r0
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_voidConnectPullUp+0x170>
    22d0:	80 95       	com	r24
    22d2:	84 23       	and	r24, r20
    22d4:	8c 93       	st	X, r24
    22d6:	8b c0       	rjmp	.+278    	; 0x23ee <DIO_voidConnectPullUp+0x296>

						}
						break;

		             case DIO_PORTC:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	71 f5       	brne	.+92     	; 0x233a <DIO_voidConnectPullUp+0x1e2>
						{
							SET_BIT(PORTC,Copy_u8PIN);
    22de:	a5 e3       	ldi	r26, 0x35	; 53
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e5 e3       	ldi	r30, 0x35	; 53
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	48 2f       	mov	r20, r24
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <DIO_voidConnectPullUp+0x1a2>
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	2a 95       	dec	r18
    22fc:	e2 f7       	brpl	.-8      	; 0x22f6 <DIO_voidConnectPullUp+0x19e>
    22fe:	84 2b       	or	r24, r20
    2300:	8c 93       	st	X, r24
							CLR_BIT(DDRC,Copy_u8PIN);
    2302:	a4 e3       	ldi	r26, 0x34	; 52
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e4 e3       	ldi	r30, 0x34	; 52
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_voidConnectPullUp+0x1c8>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_voidConnectPullUp+0x1c4>
    2324:	80 95       	com	r24
    2326:	84 23       	and	r24, r20
    2328:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    232a:	a0 e5       	ldi	r26, 0x50	; 80
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e0 e5       	ldi	r30, 0x50	; 80
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8b 7f       	andi	r24, 0xFB	; 251
    2336:	8c 93       	st	X, r24
    2338:	5a c0       	rjmp	.+180    	; 0x23ee <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTC,Copy_u8PIN);
    233a:	a5 e3       	ldi	r26, 0x35	; 53
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e5 e3       	ldi	r30, 0x35	; 53
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	48 2f       	mov	r20, r24
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <DIO_voidConnectPullUp+0x200>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <DIO_voidConnectPullUp+0x1fc>
    235c:	80 95       	com	r24
    235e:	84 23       	and	r24, r20
    2360:	8c 93       	st	X, r24
    2362:	45 c0       	rjmp	.+138    	; 0x23ee <DIO_voidConnectPullUp+0x296>

						}
						break;

		             case DIO_PORTD:
						if(Copy_u8ConnectPullUp==PIN_VAL_HIGH)
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	81 30       	cpi	r24, 0x01	; 1
    2368:	71 f5       	brne	.+92     	; 0x23c6 <DIO_voidConnectPullUp+0x26e>
						{
							SET_BIT(PORTD,Copy_u8PIN);
    236a:	a2 e3       	ldi	r26, 0x32	; 50
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	e2 e3       	ldi	r30, 0x32	; 50
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	48 2f       	mov	r20, r24
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <DIO_voidConnectPullUp+0x22e>
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	2a 95       	dec	r18
    2388:	e2 f7       	brpl	.-8      	; 0x2382 <DIO_voidConnectPullUp+0x22a>
    238a:	84 2b       	or	r24, r20
    238c:	8c 93       	st	X, r24
							CLR_BIT(DDRD,Copy_u8PIN);
    238e:	a1 e3       	ldi	r26, 0x31	; 49
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e1 e3       	ldi	r30, 0x31	; 49
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <DIO_voidConnectPullUp+0x254>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <DIO_voidConnectPullUp+0x250>
    23b0:	80 95       	com	r24
    23b2:	84 23       	and	r24, r20
    23b4:	8c 93       	st	X, r24
							CLR_BIT(SFIOR,PUD);
    23b6:	a0 e5       	ldi	r26, 0x50	; 80
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e0 e5       	ldi	r30, 0x50	; 80
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	8b 7f       	andi	r24, 0xFB	; 251
    23c2:	8c 93       	st	X, r24
    23c4:	14 c0       	rjmp	.+40     	; 0x23ee <DIO_voidConnectPullUp+0x296>
						}
						else
						{
							CLR_BIT(PORTD,Copy_u8PIN);
    23c6:	a2 e3       	ldi	r26, 0x32	; 50
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e2 e3       	ldi	r30, 0x32	; 50
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	80 81       	ld	r24, Z
    23d0:	48 2f       	mov	r20, r24
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	28 2f       	mov	r18, r24
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	02 2e       	mov	r0, r18
    23de:	02 c0       	rjmp	.+4      	; 0x23e4 <DIO_voidConnectPullUp+0x28c>
    23e0:	88 0f       	add	r24, r24
    23e2:	99 1f       	adc	r25, r25
    23e4:	0a 94       	dec	r0
    23e6:	e2 f7       	brpl	.-8      	; 0x23e0 <DIO_voidConnectPullUp+0x288>
    23e8:	80 95       	com	r24
    23ea:	84 23       	and	r24, r20
    23ec:	8c 93       	st	X, r24

				}



			}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <USART_voidInit>:




void USART_voidInit(void)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <USART_voidInit+0x6>
    2404:	0f 92       	push	r0
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC=0;
    240a:	1b 82       	std	Y+3, r1	; 0x03

	/*Calculate The Baud Rate From The Equation */
	u16 Local_u8UBRR=(u16)((SYSTEM_FREQUENCY/(16*USART_BOUND_RATE))-1);
    240c:	83 e3       	ldi	r24, 0x33	; 51
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9a 83       	std	Y+2, r25	; 0x02
    2412:	89 83       	std	Y+1, r24	; 0x01

	UBRRH=(u8)(Local_u8UBRR>>8);
    2414:	e0 e4       	ldi	r30, 0x40	; 64
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	9a 81       	ldd	r25, Y+2	; 0x02
    241c:	89 2f       	mov	r24, r25
    241e:	99 27       	eor	r25, r25
    2420:	80 83       	st	Z, r24
	UBRRL=(u8)Local_u8UBRR;
    2422:	e9 e2       	ldi	r30, 0x29	; 41
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	80 83       	st	Z, r24




#if(USART_MODE==ASYNCHRONOUS)&&(USART_SYSTEM_SPEED==USART_LOWSPEED)
	CLR_BIT(UCSRA,UCSRA_U2X);
    242a:	ab e2       	ldi	r26, 0x2B	; 43
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	eb e2       	ldi	r30, 0x2B	; 43
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8d 7f       	andi	r24, 0xFD	; 253
    2436:	8c 93       	st	X, r24




#if USART_MODE==ASYNCHRONOUS
	CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL);
    2438:	8b 81       	ldd	r24, Y+3	; 0x03
    243a:	8f 7b       	andi	r24, 0xBF	; 191
    243c:	8b 83       	std	Y+3, r24	; 0x03




#if USART_PARITY_MODE==DISABLE
    CLR_BIT(Local_u8UCSRC,UCSRC_UPM1);
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	8f 7d       	andi	r24, 0xDF	; 223
    2442:	8b 83       	std	Y+3, r24	; 0x03
    CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	8f 7e       	andi	r24, 0xEF	; 239
    2448:	8b 83       	std	Y+3, r24	; 0x03
     CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
     CLR_BIT(UCSRB,UCSRB_UCSZ2);

#elif USART_DATA_SIZE==DATA_SIZE_8_BIT

     SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	82 60       	ori	r24, 0x02	; 2
    244e:	8b 83       	std	Y+3, r24	; 0x03
     SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	84 60       	ori	r24, 0x04	; 4
    2454:	8b 83       	std	Y+3, r24	; 0x03
     CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2456:	aa e2       	ldi	r26, 0x2A	; 42
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	ea e2       	ldi	r30, 0x2A	; 42
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	8b 7f       	andi	r24, 0xFB	; 251
    2462:	8c 93       	st	X, r24



#if USART_STOP_BIT==STOP_BIT_1

        CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	87 7f       	andi	r24, 0xF7	; 247
    2468:	8b 83       	std	Y+3, r24	; 0x03
#else
		#error "Wrong USART_STOP_BIT config"
	#endif


     SET_BIT(Local_u8UCSRC,UCSRC_URSEL);
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	80 68       	ori	r24, 0x80	; 128
    246e:	8b 83       	std	Y+3, r24	; 0x03
     UCSRC=Local_u8UCSRC;
    2470:	e0 e4       	ldi	r30, 0x40	; 64
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	80 83       	st	Z, r24

     SET_BIT(UCSRB,UCSRB_TXEN);
    2478:	aa e2       	ldi	r26, 0x2A	; 42
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	ea e2       	ldi	r30, 0x2A	; 42
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	88 60       	ori	r24, 0x08	; 8
    2484:	8c 93       	st	X, r24
     SET_BIT(UCSRB,UCSRB_RXEN);
    2486:	aa e2       	ldi	r26, 0x2A	; 42
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	ea e2       	ldi	r30, 0x2A	; 42
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	80 61       	ori	r24, 0x10	; 16
    2492:	8c 93       	st	X, r24


}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	08 95       	ret

000024a0 <USART_voidSendByte>:




void USART_voidSendByte(u8 data)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	89 83       	std	Y+1, r24	; 0x01
	while(!(GET_BIT(UCSRA,UCSRA_UDRE)));
    24ac:	eb e2       	ldi	r30, 0x2B	; 43
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	82 95       	swap	r24
    24b4:	86 95       	lsr	r24
    24b6:	87 70       	andi	r24, 0x07	; 7
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	a1 f3       	breq	.-24     	; 0x24ac <USART_voidSendByte+0xc>
	UDR=data;
    24c4:	ec e2       	ldi	r30, 0x2C	; 44
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	80 83       	st	Z, r24

}
    24cc:	0f 90       	pop	r0
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	08 95       	ret

000024d4 <USART_voidRecieveByte>:




u8 USART_voidRecieveByte(void)
{
    24d4:	df 93       	push	r29
    24d6:	cf 93       	push	r28
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
	while(!(GET_BIT(UCSRA,UCSRA_RXC)));
    24dc:	eb e2       	ldi	r30, 0x2B	; 43
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	88 23       	and	r24, r24
    24e4:	dc f7       	brge	.-10     	; 0x24dc <USART_voidRecieveByte+0x8>

 return UDR;
    24e6:	ec e2       	ldi	r30, 0x2C	; 44
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
}
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <USART_voidSendString>:




void USART_voidSendString(u8 *str)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <USART_voidSendString+0x6>
    24f8:	0f 92       	push	r0
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	9b 83       	std	Y+3, r25	; 0x03
    2500:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
    2502:	19 82       	std	Y+1, r1	; 0x01
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <USART_voidSendString+0x30>
	while(str[count]!='\0')
	{
		USART_voidSendByte(str[count]);
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	fc 01       	movw	r30, r24
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	80 81       	ld	r24, Z
    2518:	0e 94 50 12 	call	0x24a0	; 0x24a0 <USART_voidSendByte>
		count++;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	8f 5f       	subi	r24, 0xFF	; 255
    2520:	89 83       	std	Y+1, r24	; 0x01


void USART_voidSendString(u8 *str)
{
	u8 count=0;
	while(str[count]!='\0')
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	9b 81       	ldd	r25, Y+3	; 0x03
    252c:	fc 01       	movw	r30, r24
    252e:	e2 0f       	add	r30, r18
    2530:	f3 1f       	adc	r31, r19
    2532:	80 81       	ld	r24, Z
    2534:	88 23       	and	r24, r24
    2536:	39 f7       	brne	.-50     	; 0x2506 <USART_voidSendString+0x14>
	{
		USART_voidSendByte(str[count]);
		count++;

	}
	USART_voidSendByte(str[count]);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	9b 81       	ldd	r25, Y+3	; 0x03
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 50 12 	call	0x24a0	; 0x24a0 <USART_voidSendByte>
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <USART_voidRecieveString>:


void USART_voidRecieveString(u8 *str)
{
    255a:	0f 93       	push	r16
    255c:	1f 93       	push	r17
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	00 d0       	rcall	.+0      	; 0x2564 <USART_voidRecieveString+0xa>
    2564:	0f 92       	push	r0
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	9b 83       	std	Y+3, r25	; 0x03
    256c:	8a 83       	std	Y+2, r24	; 0x02
	u8 count=0;
    256e:	19 82       	std	Y+1, r1	; 0x01
	str[count]=USART_voidRecieveByte();
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	8c 01       	movw	r16, r24
    257c:	02 0f       	add	r16, r18
    257e:	13 1f       	adc	r17, r19
    2580:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <USART_voidRecieveByte>
    2584:	f8 01       	movw	r30, r16
    2586:	80 83       	st	Z, r24
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <USART_voidRecieveString+0x4e>
	while(str[count]!=' ')
	{
		count++;
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	8f 5f       	subi	r24, 0xFF	; 255
    258e:	89 83       	std	Y+1, r24	; 0x01
		str[count]=USART_voidRecieveByte();
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	28 2f       	mov	r18, r24
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	9b 81       	ldd	r25, Y+3	; 0x03
    259a:	8c 01       	movw	r16, r24
    259c:	02 0f       	add	r16, r18
    259e:	13 1f       	adc	r17, r19
    25a0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <USART_voidRecieveByte>
    25a4:	f8 01       	movw	r30, r16
    25a6:	80 83       	st	Z, r24

void USART_voidRecieveString(u8 *str)
{
	u8 count=0;
	str[count]=USART_voidRecieveByte();
	while(str[count]!=' ')
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	fc 01       	movw	r30, r24
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	80 81       	ld	r24, Z
    25ba:	80 32       	cpi	r24, 0x20	; 32
    25bc:	31 f7       	brne	.-52     	; 0x258a <USART_voidRecieveString+0x30>
		count++;
		str[count]=USART_voidRecieveByte();


	}
	str[count]='\0';
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	fc 01       	movw	r30, r24
    25ca:	e2 0f       	add	r30, r18
    25cc:	f3 1f       	adc	r31, r19
    25ce:	10 82       	st	Z, r1

}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	1f 91       	pop	r17
    25dc:	0f 91       	pop	r16
    25de:	08 95       	ret

000025e0 <Compare_string>:


u8 Compare_string(u8 arr1[10],u8 arr2[10])
{
    25e0:	df 93       	push	r29
    25e2:	cf 93       	push	r28
    25e4:	00 d0       	rcall	.+0      	; 0x25e6 <Compare_string+0x6>
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <Compare_string+0x8>
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <Compare_string+0xa>
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	9c 83       	std	Y+4, r25	; 0x04
    25f0:	8b 83       	std	Y+3, r24	; 0x03
    25f2:	7e 83       	std	Y+6, r23	; 0x06
    25f4:	6d 83       	std	Y+5, r22	; 0x05

   u8 count=0;
    25f6:	1a 82       	std	Y+2, r1	; 0x02
   u8 flag=1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	89 83       	std	Y+1, r24	; 0x01
    25fc:	1c c0       	rjmp	.+56     	; 0x2636 <Compare_string+0x56>
   while(arr2[count]!='\0')
   {
	  if(arr1[count]==arr2[count])
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	9c 81       	ldd	r25, Y+4	; 0x04
    2608:	fc 01       	movw	r30, r24
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	40 81       	ld	r20, Z
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	fc 01       	movw	r30, r24
    261c:	e2 0f       	add	r30, r18
    261e:	f3 1f       	adc	r31, r19
    2620:	80 81       	ld	r24, Z
    2622:	48 17       	cp	r20, r24
    2624:	31 f4       	brne	.+12     	; 0x2632 <Compare_string+0x52>
	  {
		  flag=1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	89 83       	std	Y+1, r24	; 0x01
	  {
		  flag=0;
		  break;
	  }

	  count++;
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	8a 83       	std	Y+2, r24	; 0x02
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <Compare_string+0x56>
	  {
		  flag=1;
	  }
	  else
	  {
		  flag=0;
    2632:	19 82       	std	Y+1, r1	; 0x01
    2634:	0b c0       	rjmp	.+22     	; 0x264c <Compare_string+0x6c>
u8 Compare_string(u8 arr1[10],u8 arr2[10])
{

   u8 count=0;
   u8 flag=1;
   while(arr2[count]!='\0')
    2636:	8a 81       	ldd	r24, Y+2	; 0x02
    2638:	28 2f       	mov	r18, r24
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	fc 01       	movw	r30, r24
    2642:	e2 0f       	add	r30, r18
    2644:	f3 1f       	adc	r31, r19
    2646:	80 81       	ld	r24, Z
    2648:	88 23       	and	r24, r24
    264a:	c9 f6       	brne	.-78     	; 0x25fe <Compare_string+0x1e>

	  count++;


   }
   return flag;
    264c:	89 81       	ldd	r24, Y+1	; 0x01

}
    264e:	26 96       	adiw	r28, 0x06	; 6
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <main>:


	static 	u8 flag=1;

	void main()
	{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	a8 97       	sbiw	r28, 0x28	; 40
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
		u8 user_name[10];

        DIO_voidSetPortDirection(DIO_PORTA,PORT_DIR_OUTPUT);
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	6f ef       	ldi	r22, 0xFF	; 255
    2678:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <DIO_voidSetPortDirection>

		DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN0,PIN_DIR_OUTPUT);
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN1,PIN_DIR_OUTPUT);
    2686:	82 e0       	ldi	r24, 0x02	; 2
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>

		DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN0,PIN_DIR_INPUT);
    2690:	83 e0       	ldi	r24, 0x03	; 3
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN1,PIN_DIR_OUTPUT);
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	61 e0       	ldi	r22, 0x01	; 1
    269e:	41 e0       	ldi	r20, 0x01	; 1
    26a0:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <DIO_voidSetPinDirection>



		USART_voidInit();
    26a4:	0e 94 ff 11 	call	0x23fe	; 0x23fe <USART_voidInit>
		CLCD_voidInit();
    26a8:	0e 94 9b 05 	call	0xb36	; 0xb36 <CLCD_voidInit>
	while(1)
	{
		user_name[10];


     CLCD_voidClearScreen();
    26ac:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>

     CLCD_voidSetPosition(1,5);
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	65 e0       	ldi	r22, 0x05	; 5
    26b4:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
	 CLCD_voidSendString("WELCOM");
    26b8:	80 e6       	ldi	r24, 0x60	; 96
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
	 CLCD_voidSetPosition(2,2);
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	62 e0       	ldi	r22, 0x02	; 2
    26c4:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
	 CLCD_voidSendString("Enter The User Name");
    26c8:	87 e6       	ldi	r24, 0x67	; 103
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
	 for(u8 i=8;i<14;i++)
    26d0:	88 e0       	ldi	r24, 0x08	; 8
    26d2:	8e 8f       	std	Y+30, r24	; 0x1e
    26d4:	75 c0       	rjmp	.+234    	; 0x27c0 <main+0x160>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	a8 ec       	ldi	r26, 0xC8	; 200
    26dc:	b3 e4       	ldi	r27, 0x43	; 67
    26de:	89 8f       	std	Y+25, r24	; 0x19
    26e0:	9a 8f       	std	Y+26, r25	; 0x1a
    26e2:	ab 8f       	std	Y+27, r26	; 0x1b
    26e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e6:	69 8d       	ldd	r22, Y+25	; 0x19
    26e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4a e7       	ldi	r20, 0x7A	; 122
    26f4:	53 e4       	ldi	r21, 0x43	; 67
    26f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	8d 8b       	std	Y+21, r24	; 0x15
    2700:	9e 8b       	std	Y+22, r25	; 0x16
    2702:	af 8b       	std	Y+23, r26	; 0x17
    2704:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2706:	6d 89       	ldd	r22, Y+21	; 0x15
    2708:	7e 89       	ldd	r23, Y+22	; 0x16
    270a:	8f 89       	ldd	r24, Y+23	; 0x17
    270c:	98 8d       	ldd	r25, Y+24	; 0x18
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e8       	ldi	r20, 0x80	; 128
    2714:	5f e3       	ldi	r21, 0x3F	; 63
    2716:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    271a:	88 23       	and	r24, r24
    271c:	2c f4       	brge	.+10     	; 0x2728 <main+0xc8>
		__ticks = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9c 8b       	std	Y+20, r25	; 0x14
    2724:	8b 8b       	std	Y+19, r24	; 0x13
    2726:	3f c0       	rjmp	.+126    	; 0x27a6 <main+0x146>
	else if (__tmp > 65535)
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f e7       	ldi	r20, 0x7F	; 127
    2736:	57 e4       	ldi	r21, 0x47	; 71
    2738:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    273c:	18 16       	cp	r1, r24
    273e:	4c f5       	brge	.+82     	; 0x2792 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	69 8d       	ldd	r22, Y+25	; 0x19
    2742:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2744:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2746:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	bc 01       	movw	r22, r24
    275a:	cd 01       	movw	r24, r26
    275c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9c 8b       	std	Y+20, r25	; 0x14
    2766:	8b 8b       	std	Y+19, r24	; 0x13
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <main+0x128>
    276a:	89 e1       	ldi	r24, 0x19	; 25
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	9a 8b       	std	Y+18, r25	; 0x12
    2770:	89 8b       	std	Y+17, r24	; 0x11
    2772:	89 89       	ldd	r24, Y+17	; 0x11
    2774:	9a 89       	ldd	r25, Y+18	; 0x12
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0x116>
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277e:	8b 89       	ldd	r24, Y+19	; 0x13
    2780:	9c 89       	ldd	r25, Y+20	; 0x14
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9c 8b       	std	Y+20, r25	; 0x14
    2786:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2788:	8b 89       	ldd	r24, Y+19	; 0x13
    278a:	9c 89       	ldd	r25, Y+20	; 0x14
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	69 f7       	brne	.-38     	; 0x276a <main+0x10a>
    2790:	14 c0       	rjmp	.+40     	; 0x27ba <main+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	6d 89       	ldd	r22, Y+21	; 0x15
    2794:	7e 89       	ldd	r23, Y+22	; 0x16
    2796:	8f 89       	ldd	r24, Y+23	; 0x17
    2798:	98 8d       	ldd	r25, Y+24	; 0x18
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	9c 8b       	std	Y+20, r25	; 0x14
    27a4:	8b 8b       	std	Y+19, r24	; 0x13
    27a6:	8b 89       	ldd	r24, Y+19	; 0x13
    27a8:	9c 89       	ldd	r25, Y+20	; 0x14
    27aa:	98 8b       	std	Y+16, r25	; 0x10
    27ac:	8f 87       	std	Y+15, r24	; 0x0f
    27ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b0:	98 89       	ldd	r25, Y+16	; 0x10
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <main+0x152>
    27b6:	98 8b       	std	Y+16, r25	; 0x10
    27b8:	8f 87       	std	Y+15, r24	; 0x0f
    27ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	8e 8f       	std	Y+30, r24	; 0x1e
    27c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27c2:	8e 30       	cpi	r24, 0x0E	; 14
    27c4:	08 f4       	brcc	.+2      	; 0x27c8 <main+0x168>
    27c6:	87 cf       	rjmp	.-242    	; 0x26d6 <main+0x76>
					 {
						 _delay_ms(400);

					 }

    CLCD_voidClearScreen();
    27c8:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
    CLCD_voidSendString("Scanning");
    27cc:	8b e7       	ldi	r24, 0x7B	; 123
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

    for(u8 i=10;i<15;i++)
    27d4:	8a e0       	ldi	r24, 0x0A	; 10
    27d6:	8d 8f       	std	Y+29, r24	; 0x1d
    27d8:	7c c0       	rjmp	.+248    	; 0x28d2 <main+0x272>
   			 {
   				 CLCD_voidSetPosition(1,i);
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27de:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
   				 CLCD_voidSendData('.');
    27e2:	8e e2       	ldi	r24, 0x2E	; 46
    27e4:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	aa ef       	ldi	r26, 0xFA	; 250
    27ee:	b3 e4       	ldi	r27, 0x43	; 67
    27f0:	8b 87       	std	Y+11, r24	; 0x0b
    27f2:	9c 87       	std	Y+12, r25	; 0x0c
    27f4:	ad 87       	std	Y+13, r26	; 0x0d
    27f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    27fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a e7       	ldi	r20, 0x7A	; 122
    2806:	53 e4       	ldi	r21, 0x43	; 67
    2808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8f 83       	std	Y+7, r24	; 0x07
    2812:	98 87       	std	Y+8, r25	; 0x08
    2814:	a9 87       	std	Y+9, r26	; 0x09
    2816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2818:	6f 81       	ldd	r22, Y+7	; 0x07
    281a:	78 85       	ldd	r23, Y+8	; 0x08
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <main+0x1da>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9e 83       	std	Y+6, r25	; 0x06
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <main+0x258>
	else if (__tmp > 65535)
    283a:	6f 81       	ldd	r22, Y+7	; 0x07
    283c:	78 85       	ldd	r23, Y+8	; 0x08
    283e:	89 85       	ldd	r24, Y+9	; 0x09
    2840:	9a 85       	ldd	r25, Y+10	; 0x0a
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	6b 85       	ldd	r22, Y+11	; 0x0b
    2854:	7c 85       	ldd	r23, Y+12	; 0x0c
    2856:	8d 85       	ldd	r24, Y+13	; 0x0d
    2858:	9e 85       	ldd	r25, Y+14	; 0x0e
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	0f c0       	rjmp	.+30     	; 0x289a <main+0x23a>
    287c:	89 e1       	ldi	r24, 0x19	; 25
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9c 83       	std	Y+4, r25	; 0x04
    2882:	8b 83       	std	Y+3, r24	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <main+0x228>
    288c:	9c 83       	std	Y+4, r25	; 0x04
    288e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
    289c:	9e 81       	ldd	r25, Y+6	; 0x06
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <main+0x21c>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <main+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	8d 83       	std	Y+5, r24	; 0x05
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	9a 83       	std	Y+2, r25	; 0x02
    28be:	89 83       	std	Y+1, r24	; 0x01
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <main+0x264>
    28c8:	9a 83       	std	Y+2, r25	; 0x02
    28ca:	89 83       	std	Y+1, r24	; 0x01
					 }

    CLCD_voidClearScreen();
    CLCD_voidSendString("Scanning");

    for(u8 i=10;i<15;i++)
    28cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ce:	8f 5f       	subi	r24, 0xFF	; 255
    28d0:	8d 8f       	std	Y+29, r24	; 0x1d
    28d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28d4:	8f 30       	cpi	r24, 0x0F	; 15
    28d6:	08 f4       	brcc	.+2      	; 0x28da <main+0x27a>
    28d8:	80 cf       	rjmp	.-256    	; 0x27da <main+0x17a>
   			 }




	USART_voidSendString("\r\n Enter The User Name \r\n");
    28da:	84 e8       	ldi	r24, 0x84	; 132
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
	USART_voidRecieveString(user_name);
    28e2:	ce 01       	movw	r24, r28
    28e4:	4f 96       	adiw	r24, 0x1f	; 31
    28e6:	0e 94 ad 12 	call	0x255a	; 0x255a <USART_voidRecieveString>

    CLCD_voidClearScreen();
    28ea:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>



	if(Compare_string(user_name,"AHMED"))
    28ee:	ce 01       	movw	r24, r28
    28f0:	4f 96       	adiw	r24, 0x1f	; 31
    28f2:	2e e9       	ldi	r18, 0x9E	; 158
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	b9 01       	movw	r22, r18
    28f8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    28fc:	88 23       	and	r24, r24
    28fe:	69 f0       	breq	.+26     	; 0x291a <main+0x2ba>
	{
		CLCD_voidSetPosition(1,3);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	63 e0       	ldi	r22, 0x03	; 3
    2904:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI AHMED");
    2908:	84 ea       	ldi	r24, 0xA4	; 164
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>


	     password_func("1111");
    2910:	8d ea       	ldi	r24, 0xAD	; 173
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2918:	c9 ce       	rjmp	.-622    	; 0x26ac <main+0x4c>

	}

	else if(Compare_string(user_name,"RANA"))
    291a:	ce 01       	movw	r24, r28
    291c:	4f 96       	adiw	r24, 0x1f	; 31
    291e:	22 eb       	ldi	r18, 0xB2	; 178
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	b9 01       	movw	r22, r18
    2924:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2928:	88 23       	and	r24, r24
    292a:	69 f0       	breq	.+26     	; 0x2946 <main+0x2e6>
		{
		CLCD_voidSetPosition(1,3);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	63 e0       	ldi	r22, 0x03	; 3
    2930:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI RANA");
    2934:	87 eb       	ldi	r24, 0xB7	; 183
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		 password_func("2222");
    293c:	8f eb       	ldi	r24, 0xBF	; 191
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2944:	b3 ce       	rjmp	.-666    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"RAMY"))
    2946:	ce 01       	movw	r24, r28
    2948:	4f 96       	adiw	r24, 0x1f	; 31
    294a:	24 ec       	ldi	r18, 0xC4	; 196
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	b9 01       	movw	r22, r18
    2950:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2954:	88 23       	and	r24, r24
    2956:	69 f0       	breq	.+26     	; 0x2972 <main+0x312>
		{
		CLCD_voidSetPosition(1,3);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI RAMY");
    2960:	89 ec       	ldi	r24, 0xC9	; 201
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>


		 password_func("3333");
    2968:	81 ed       	ldi	r24, 0xD1	; 209
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2970:	9d ce       	rjmp	.-710    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"OMAR"))
    2972:	ce 01       	movw	r24, r28
    2974:	4f 96       	adiw	r24, 0x1f	; 31
    2976:	26 ed       	ldi	r18, 0xD6	; 214
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	b9 01       	movw	r22, r18
    297c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2980:	88 23       	and	r24, r24
    2982:	69 f0       	breq	.+26     	; 0x299e <main+0x33e>
		{
		CLCD_voidSetPosition(1,3);
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	63 e0       	ldi	r22, 0x03	; 3
    2988:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI OMAR");
    298c:	8b ed       	ldi	r24, 0xDB	; 219
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		 password_func("4444");
    2994:	83 ee       	ldi	r24, 0xE3	; 227
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    299c:	87 ce       	rjmp	.-754    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"REEM"))
    299e:	ce 01       	movw	r24, r28
    29a0:	4f 96       	adiw	r24, 0x1f	; 31
    29a2:	28 ee       	ldi	r18, 0xE8	; 232
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	b9 01       	movw	r22, r18
    29a8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    29ac:	88 23       	and	r24, r24
    29ae:	69 f0       	breq	.+26     	; 0x29ca <main+0x36a>
		{
		CLCD_voidSetPosition(1,3);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	63 e0       	ldi	r22, 0x03	; 3
    29b4:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI REEM");
    29b8:	8d ee       	ldi	r24, 0xED	; 237
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>


		 password_func("5555");
    29c0:	85 ef       	ldi	r24, 0xF5	; 245
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    29c8:	71 ce       	rjmp	.-798    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"NOUR"))
    29ca:	ce 01       	movw	r24, r28
    29cc:	4f 96       	adiw	r24, 0x1f	; 31
    29ce:	2a ef       	ldi	r18, 0xFA	; 250
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	b9 01       	movw	r22, r18
    29d4:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    29d8:	88 23       	and	r24, r24
    29da:	69 f0       	breq	.+26     	; 0x29f6 <main+0x396>
		{
		CLCD_voidSetPosition(1,3);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	63 e0       	ldi	r22, 0x03	; 3
    29e0:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI NOUR");
    29e4:	8f ef       	ldi	r24, 0xFF	; 255
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		 password_func("6666");
    29ec:	87 e0       	ldi	r24, 0x07	; 7
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    29f4:	5b ce       	rjmp	.-842    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"KARIM"))
    29f6:	ce 01       	movw	r24, r28
    29f8:	4f 96       	adiw	r24, 0x1f	; 31
    29fa:	2c e0       	ldi	r18, 0x0C	; 12
    29fc:	31 e0       	ldi	r19, 0x01	; 1
    29fe:	b9 01       	movw	r22, r18
    2a00:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2a04:	88 23       	and	r24, r24
    2a06:	69 f0       	breq	.+26     	; 0x2a22 <main+0x3c2>
		{
		CLCD_voidSetPosition(1,3);
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	63 e0       	ldi	r22, 0x03	; 3
    2a0c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI KARIM");
    2a10:	82 e1       	ldi	r24, 0x12	; 18
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		 password_func("7777");
    2a18:	8b e1       	ldi	r24, 0x1B	; 27
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2a20:	45 ce       	rjmp	.-886    	; 0x26ac <main+0x4c>

		}

	else if(Compare_string(user_name,"ZIAD"))
    2a22:	ce 01       	movw	r24, r28
    2a24:	4f 96       	adiw	r24, 0x1f	; 31
    2a26:	20 e2       	ldi	r18, 0x20	; 32
    2a28:	31 e0       	ldi	r19, 0x01	; 1
    2a2a:	b9 01       	movw	r22, r18
    2a2c:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2a30:	88 23       	and	r24, r24
    2a32:	69 f0       	breq	.+26     	; 0x2a4e <main+0x3ee>
		{
		CLCD_voidSetPosition(1,3);
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	63 e0       	ldi	r22, 0x03	; 3
    2a38:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI ZIAD");
    2a3c:	85 e2       	ldi	r24, 0x25	; 37
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>


		 password_func("8888");
    2a44:	8d e2       	ldi	r24, 0x2D	; 45
    2a46:	91 e0       	ldi	r25, 0x01	; 1
    2a48:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2a4c:	2f ce       	rjmp	.-930    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"MAHER"))
    2a4e:	ce 01       	movw	r24, r28
    2a50:	4f 96       	adiw	r24, 0x1f	; 31
    2a52:	22 e3       	ldi	r18, 0x32	; 50
    2a54:	31 e0       	ldi	r19, 0x01	; 1
    2a56:	b9 01       	movw	r22, r18
    2a58:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2a5c:	88 23       	and	r24, r24
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <main+0x41a>
		{
		CLCD_voidSetPosition(1,3);
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	63 e0       	ldi	r22, 0x03	; 3
    2a64:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI MAHER");
    2a68:	88 e3       	ldi	r24, 0x38	; 56
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		 password_func("9999");
    2a70:	81 e4       	ldi	r24, 0x41	; 65
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2a78:	19 ce       	rjmp	.-974    	; 0x26ac <main+0x4c>

		}
	else if(Compare_string(user_name,"FARIDA"))
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	4f 96       	adiw	r24, 0x1f	; 31
    2a7e:	26 e4       	ldi	r18, 0x46	; 70
    2a80:	31 e0       	ldi	r19, 0x01	; 1
    2a82:	b9 01       	movw	r22, r18
    2a84:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    2a88:	88 23       	and	r24, r24
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <main+0x42e>
    2a8c:	0f ce       	rjmp	.-994    	; 0x26ac <main+0x4c>
		{
		CLCD_voidSetPosition(1,3);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	63 e0       	ldi	r22, 0x03	; 3
    2a92:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>

		CLCD_voidSendString("HI FARIDA");
    2a96:	8d e4       	ldi	r24, 0x4D	; 77
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		 password_func("1234");
    2a9e:	87 e5       	ldi	r24, 0x57	; 87
    2aa0:	91 e0       	ldi	r25, 0x01	; 1
    2aa2:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <password_func>
    2aa6:	02 ce       	rjmp	.-1020   	; 0x26ac <main+0x4c>

00002aa8 <the_system>:




	void the_system(void)
	{
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	df 93       	push	r29
    2aae:	cf 93       	push	r28
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	c9 56       	subi	r28, 0x69	; 105
    2ab6:	d0 40       	sbci	r29, 0x00	; 0
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
		u8 the_choice;

		USART_voidSendString("\r\n welcome home \r\n");
    2ac2:	8c e5       	ldi	r24, 0x5C	; 92
    2ac4:	91 e0       	ldi	r25, 0x01	; 1
    2ac6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>

		USART_voidSendString("\r\n here is your options \r\n");
    2aca:	8f e6       	ldi	r24, 0x6F	; 111
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
		USART_voidSendString("\r\n A=>>for opening the door \r\n");
    2ad2:	8a e8       	ldi	r24, 0x8A	; 138
    2ad4:	91 e0       	ldi	r25, 0x01	; 1
    2ad6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
		USART_voidSendString("\r\n B=>>for closing the door \r\n");
    2ada:	89 ea       	ldi	r24, 0xA9	; 169
    2adc:	91 e0       	ldi	r25, 0x01	; 1
    2ade:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
		USART_voidSendString("\r\n C=>>for turning on the light \r\n");
    2ae2:	88 ec       	ldi	r24, 0xC8	; 200
    2ae4:	91 e0       	ldi	r25, 0x01	; 1
    2ae6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
		USART_voidSendString("\r\n D=>>for turning off the light \r\n");
    2aea:	8b ee       	ldi	r24, 0xEB	; 235
    2aec:	91 e0       	ldi	r25, 0x01	; 1
    2aee:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
		USART_voidSendString("\r\n E=>>for logging out \r\n");
    2af2:	8f e0       	ldi	r24, 0x0F	; 15
    2af4:	92 e0       	ldi	r25, 0x02	; 2
    2af6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>


		the_choice=USART_voidRecieveByte();
    2afa:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <USART_voidRecieveByte>
    2afe:	fe 01       	movw	r30, r28
    2b00:	e9 59       	subi	r30, 0x99	; 153
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 83       	st	Z, r24


		switch (the_choice)
    2b06:	fe 01       	movw	r30, r28
    2b08:	e9 59       	subi	r30, 0x99	; 153
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	aa 96       	adiw	r28, 0x2a	; 42
    2b14:	3f af       	std	Y+63, r19	; 0x3f
    2b16:	2e af       	std	Y+62, r18	; 0x3e
    2b18:	aa 97       	sbiw	r28, 0x2a	; 42
    2b1a:	aa 96       	adiw	r28, 0x2a	; 42
    2b1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b20:	aa 97       	sbiw	r28, 0x2a	; 42
    2b22:	83 34       	cpi	r24, 0x43	; 67
    2b24:	91 05       	cpc	r25, r1
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <the_system+0x82>
    2b28:	fb c2       	rjmp	.+1526   	; 0x3120 <the_system+0x678>
    2b2a:	aa 96       	adiw	r28, 0x2a	; 42
    2b2c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b30:	aa 97       	sbiw	r28, 0x2a	; 42
    2b32:	e4 34       	cpi	r30, 0x44	; 68
    2b34:	f1 05       	cpc	r31, r1
    2b36:	84 f4       	brge	.+32     	; 0x2b58 <the_system+0xb0>
    2b38:	aa 96       	adiw	r28, 0x2a	; 42
    2b3a:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b3e:	aa 97       	sbiw	r28, 0x2a	; 42
    2b40:	21 34       	cpi	r18, 0x41	; 65
    2b42:	31 05       	cpc	r19, r1
    2b44:	d1 f0       	breq	.+52     	; 0x2b7a <the_system+0xd2>
    2b46:	aa 96       	adiw	r28, 0x2a	; 42
    2b48:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b4c:	aa 97       	sbiw	r28, 0x2a	; 42
    2b4e:	82 34       	cpi	r24, 0x42	; 66
    2b50:	91 05       	cpc	r25, r1
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <the_system+0xae>
    2b54:	b3 c1       	rjmp	.+870    	; 0x2ebc <the_system+0x414>
    2b56:	9c c4       	rjmp	.+2360   	; 0x3490 <the_system+0x9e8>
    2b58:	aa 96       	adiw	r28, 0x2a	; 42
    2b5a:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b5c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b5e:	aa 97       	sbiw	r28, 0x2a	; 42
    2b60:	e4 34       	cpi	r30, 0x44	; 68
    2b62:	f1 05       	cpc	r31, r1
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <the_system+0xc0>
    2b66:	7a c3       	rjmp	.+1780   	; 0x325c <the_system+0x7b4>
    2b68:	aa 96       	adiw	r28, 0x2a	; 42
    2b6a:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b6c:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b6e:	aa 97       	sbiw	r28, 0x2a	; 42
    2b70:	25 34       	cpi	r18, 0x45	; 69
    2b72:	31 05       	cpc	r19, r1
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <the_system+0xd0>
    2b76:	10 c4       	rjmp	.+2080   	; 0x3398 <the_system+0x8f0>
    2b78:	8b c4       	rjmp	.+2326   	; 0x3490 <the_system+0x9e8>
		{
		case'A':
			CLCD_voidClearScreen();
    2b7a:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
			CLCD_voidSendString("Opening");
    2b7e:	89 e2       	ldi	r24, 0x29	; 41
    2b80:	92 e0       	ldi	r25, 0x02	; 2
    2b82:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

		    for(u8 i=8;i<14;i++)
    2b86:	fe 01       	movw	r30, r28
    2b88:	ea 59       	subi	r30, 0x9A	; 154
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	88 e0       	ldi	r24, 0x08	; 8
    2b8e:	80 83       	st	Z, r24
    2b90:	c6 c0       	rjmp	.+396    	; 0x2d1e <the_system+0x276>
		   			 {
		   				 CLCD_voidSetPosition(1,i);
    2b92:	fe 01       	movw	r30, r28
    2b94:	ea 59       	subi	r30, 0x9A	; 154
    2b96:	ff 4f       	sbci	r31, 0xFF	; 255
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	60 81       	ld	r22, Z
    2b9c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
		   				 CLCD_voidSendData('.');
    2ba0:	8e e2       	ldi	r24, 0x2E	; 46
    2ba2:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e1 5a       	subi	r30, 0xA1	; 161
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a8 ec       	ldi	r26, 0xC8	; 200
    2bb2:	b3 e4       	ldi	r27, 0x43	; 67
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	05 5a       	subi	r16, 0xA5	; 165
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e1 5a       	subi	r30, 0xA1	; 161
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a e7       	ldi	r20, 0x7A	; 122
    2bd6:	53 e4       	ldi	r21, 0x43	; 67
    2bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	80 83       	st	Z, r24
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	a2 83       	std	Z+2, r26	; 0x02
    2be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5a       	subi	r30, 0xA5	; 165
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	44 f4       	brge	.+16     	; 0x2c18 <the_system+0x170>
		__ticks = 1;
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e7 5a       	subi	r30, 0xA7	; 167
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	64 c0       	rjmp	.+200    	; 0x2ce0 <the_system+0x238>
	else if (__tmp > 65535)
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e5 5a       	subi	r30, 0xA5	; 165
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <the_system+0x190>
    2c36:	43 c0       	rjmp	.+134    	; 0x2cbe <the_system+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e1 5a       	subi	r30, 0xA1	; 161
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8e 01       	movw	r16, r28
    2c58:	07 5a       	subi	r16, 0xA7	; 167
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	f8 01       	movw	r30, r16
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	1f c0       	rjmp	.+62     	; 0x2cae <the_system+0x206>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 5a       	subi	r30, 0xA9	; 169
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	89 e1       	ldi	r24, 0x19	; 25
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e9 5a       	subi	r30, 0xA9	; 169
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <the_system+0x1e0>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e9 5a       	subi	r30, 0xA9	; 169
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	de 01       	movw	r26, r28
    2c98:	a7 5a       	subi	r26, 0xA7	; 167
    2c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	11 96       	adiw	r26, 0x01	; 1
    2caa:	9c 93       	st	X, r25
    2cac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e7 5a       	subi	r30, 0xA7	; 167
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	d1 f6       	brne	.-76     	; 0x2c70 <the_system+0x1c8>
    2cbc:	27 c0       	rjmp	.+78     	; 0x2d0c <the_system+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	07 5a       	subi	r16, 0xA7	; 167
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e5 5a       	subi	r30, 0xA5	; 165
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	f8 01       	movw	r30, r16
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	de 01       	movw	r26, r28
    2ce2:	ab 5a       	subi	r26, 0xAB	; 171
    2ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e7 5a       	subi	r30, 0xA7	; 167
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	8d 93       	st	X+, r24
    2cf2:	9c 93       	st	X, r25
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	eb 5a       	subi	r30, 0xAB	; 171
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <the_system+0x256>
    2d02:	fe 01       	movw	r30, r28
    2d04:	eb 5a       	subi	r30, 0xAB	; 171
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
		{
		case'A':
			CLCD_voidClearScreen();
			CLCD_voidSendString("Opening");

		    for(u8 i=8;i<14;i++)
    2d0c:	de 01       	movw	r26, r28
    2d0e:	aa 59       	subi	r26, 0x9A	; 154
    2d10:	bf 4f       	sbci	r27, 0xFF	; 255
    2d12:	fe 01       	movw	r30, r28
    2d14:	ea 59       	subi	r30, 0x9A	; 154
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	8f 5f       	subi	r24, 0xFF	; 255
    2d1c:	8c 93       	st	X, r24
    2d1e:	fe 01       	movw	r30, r28
    2d20:	ea 59       	subi	r30, 0x9A	; 154
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	80 81       	ld	r24, Z
    2d26:	8e 30       	cpi	r24, 0x0E	; 14
    2d28:	08 f4       	brcc	.+2      	; 0x2d2c <the_system+0x284>
    2d2a:	33 cf       	rjmp	.-410    	; 0x2b92 <the_system+0xea>
		   				 CLCD_voidSetPosition(1,i);
		   				 CLCD_voidSendData('.');
		   				 _delay_ms(400);

		   			 }
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,PIN_VAL_HIGH);
    2d2c:	82 e0       	ldi	r24, 0x02	; 2
    2d2e:	61 e0       	ldi	r22, 0x01	; 1
    2d30:	41 e0       	ldi	r20, 0x01	; 1
    2d32:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,PIN_VAL_LOW);
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    2d40:	fe 01       	movw	r30, r28
    2d42:	ef 5a       	subi	r30, 0xAF	; 175
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	98 ec       	ldi	r25, 0xC8	; 200
    2d4a:	af ea       	ldi	r26, 0xAF	; 175
    2d4c:	b7 e4       	ldi	r27, 0x47	; 71
    2d4e:	80 83       	st	Z, r24
    2d50:	91 83       	std	Z+1, r25	; 0x01
    2d52:	a2 83       	std	Z+2, r26	; 0x02
    2d54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d56:	8e 01       	movw	r16, r28
    2d58:	03 5b       	subi	r16, 0xB3	; 179
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ef 5a       	subi	r30, 0xAF	; 175
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	4a e7       	ldi	r20, 0x7A	; 122
    2d70:	53 e4       	ldi	r21, 0x43	; 67
    2d72:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	f8 01       	movw	r30, r16
    2d7c:	80 83       	st	Z, r24
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	a2 83       	std	Z+2, r26	; 0x02
    2d82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d84:	fe 01       	movw	r30, r28
    2d86:	e3 5b       	subi	r30, 0xB3	; 179
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	60 81       	ld	r22, Z
    2d8c:	71 81       	ldd	r23, Z+1	; 0x01
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	44 f4       	brge	.+16     	; 0x2db2 <the_system+0x30a>
		__ticks = 1;
    2da2:	fe 01       	movw	r30, r28
    2da4:	e5 5b       	subi	r30, 0xB5	; 181
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	80 83       	st	Z, r24
    2db0:	64 c0       	rjmp	.+200    	; 0x2e7a <the_system+0x3d2>
	else if (__tmp > 65535)
    2db2:	fe 01       	movw	r30, r28
    2db4:	e3 5b       	subi	r30, 0xB3	; 179
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	60 81       	ld	r22, Z
    2dba:	71 81       	ldd	r23, Z+1	; 0x01
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	93 81       	ldd	r25, Z+3	; 0x03
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	0c f0       	brlt	.+2      	; 0x2dd2 <the_system+0x32a>
    2dd0:	43 c0       	rjmp	.+134    	; 0x2e58 <the_system+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd2:	fe 01       	movw	r30, r28
    2dd4:	ef 5a       	subi	r30, 0xAF	; 175
    2dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd8:	60 81       	ld	r22, Z
    2dda:	71 81       	ldd	r23, Z+1	; 0x01
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	93 81       	ldd	r25, Z+3	; 0x03
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	40 e2       	ldi	r20, 0x20	; 32
    2de6:	51 e4       	ldi	r21, 0x41	; 65
    2de8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8e 01       	movw	r16, r28
    2df2:	05 5b       	subi	r16, 0xB5	; 181
    2df4:	1f 4f       	sbci	r17, 0xFF	; 255
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	f8 01       	movw	r30, r16
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	1f c0       	rjmp	.+62     	; 0x2e48 <the_system+0x3a0>
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 5b       	subi	r30, 0xB7	; 183
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	89 e1       	ldi	r24, 0x19	; 25
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	91 83       	std	Z+1, r25	; 0x01
    2e16:	80 83       	st	Z, r24
    2e18:	fe 01       	movw	r30, r28
    2e1a:	e7 5b       	subi	r30, 0xB7	; 183
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <the_system+0x37a>
    2e26:	fe 01       	movw	r30, r28
    2e28:	e7 5b       	subi	r30, 0xB7	; 183
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	91 83       	std	Z+1, r25	; 0x01
    2e2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e30:	de 01       	movw	r26, r28
    2e32:	a5 5b       	subi	r26, 0xB5	; 181
    2e34:	bf 4f       	sbci	r27, 0xFF	; 255
    2e36:	fe 01       	movw	r30, r28
    2e38:	e5 5b       	subi	r30, 0xB5	; 181
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	80 81       	ld	r24, Z
    2e3e:	91 81       	ldd	r25, Z+1	; 0x01
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	11 96       	adiw	r26, 0x01	; 1
    2e44:	9c 93       	st	X, r25
    2e46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e48:	fe 01       	movw	r30, r28
    2e4a:	e5 5b       	subi	r30, 0xB5	; 181
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	80 81       	ld	r24, Z
    2e50:	91 81       	ldd	r25, Z+1	; 0x01
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	d1 f6       	brne	.-76     	; 0x2e0a <the_system+0x362>
    2e56:	27 c0       	rjmp	.+78     	; 0x2ea6 <the_system+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	8e 01       	movw	r16, r28
    2e5a:	05 5b       	subi	r16, 0xB5	; 181
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e3 5b       	subi	r30, 0xB3	; 179
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	f8 01       	movw	r30, r16
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
    2e7a:	de 01       	movw	r26, r28
    2e7c:	a9 5b       	subi	r26, 0xB9	; 185
    2e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2e80:	fe 01       	movw	r30, r28
    2e82:	e5 5b       	subi	r30, 0xB5	; 181
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	80 81       	ld	r24, Z
    2e88:	91 81       	ldd	r25, Z+1	; 0x01
    2e8a:	8d 93       	st	X+, r24
    2e8c:	9c 93       	st	X, r25
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e9 5b       	subi	r30, 0xB9	; 185
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <the_system+0x3f0>
    2e9c:	fe 01       	movw	r30, r28
    2e9e:	e9 5b       	subi	r30, 0xB9	; 185
    2ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea2:	91 83       	std	Z+1, r25	; 0x01
    2ea4:	80 83       	st	Z, r24

			 _delay_ms(90000);
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,PIN_VAL_LOW);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	61 e0       	ldi	r22, 0x01	; 1
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,PIN_VAL_LOW);
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    2eba:	ea c2       	rjmp	.+1492   	; 0x3490 <the_system+0x9e8>

		break;

		case'B':
					CLCD_voidClearScreen();
    2ebc:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
					CLCD_voidSendString("Closing");
    2ec0:	81 e3       	ldi	r24, 0x31	; 49
    2ec2:	92 e0       	ldi	r25, 0x02	; 2
    2ec4:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>

				    for(u8 i=8;i<14;i++)
    2ec8:	fe 01       	movw	r30, r28
    2eca:	eb 59       	subi	r30, 0x9B	; 155
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	88 e0       	ldi	r24, 0x08	; 8
    2ed0:	80 83       	st	Z, r24
    2ed2:	98 c0       	rjmp	.+304    	; 0x3004 <the_system+0x55c>
				   			 {
				   				 CLCD_voidSetPosition(1,i);
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	eb 59       	subi	r30, 0x9B	; 155
    2ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	60 81       	ld	r22, Z
    2ede:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
				   				 CLCD_voidSendData('.');
    2ee2:	8e e2       	ldi	r24, 0x2E	; 46
    2ee4:	0e 94 22 08 	call	0x1044	; 0x1044 <CLCD_voidSendData>
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ed 5b       	subi	r30, 0xBD	; 189
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	a8 ec       	ldi	r26, 0xC8	; 200
    2ef4:	b3 e4       	ldi	r27, 0x43	; 67
    2ef6:	80 83       	st	Z, r24
    2ef8:	91 83       	std	Z+1, r25	; 0x01
    2efa:	a2 83       	std	Z+2, r26	; 0x02
    2efc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efe:	8e 01       	movw	r16, r28
    2f00:	01 5c       	subi	r16, 0xC1	; 193
    2f02:	1f 4f       	sbci	r17, 0xFF	; 255
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 5b       	subi	r30, 0xBD	; 189
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	60 81       	ld	r22, Z
    2f0c:	71 81       	ldd	r23, Z+1	; 0x01
    2f0e:	82 81       	ldd	r24, Z+2	; 0x02
    2f10:	93 81       	ldd	r25, Z+3	; 0x03
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4a e7       	ldi	r20, 0x7A	; 122
    2f18:	53 e4       	ldi	r21, 0x43	; 67
    2f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f1e:	dc 01       	movw	r26, r24
    2f20:	cb 01       	movw	r24, r22
    2f22:	f8 01       	movw	r30, r16
    2f24:	80 83       	st	Z, r24
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	a2 83       	std	Z+2, r26	; 0x02
    2f2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ff 96       	adiw	r30, 0x3f	; 63
    2f30:	60 81       	ld	r22, Z
    2f32:	71 81       	ldd	r23, Z+1	; 0x01
    2f34:	82 81       	ldd	r24, Z+2	; 0x02
    2f36:	93 81       	ldd	r25, Z+3	; 0x03
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	40 e8       	ldi	r20, 0x80	; 128
    2f3e:	5f e3       	ldi	r21, 0x3F	; 63
    2f40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f44:	88 23       	and	r24, r24
    2f46:	2c f4       	brge	.+10     	; 0x2f52 <the_system+0x4aa>
		__ticks = 1;
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	9e af       	std	Y+62, r25	; 0x3e
    2f4e:	8d af       	std	Y+61, r24	; 0x3d
    2f50:	46 c0       	rjmp	.+140    	; 0x2fde <the_system+0x536>
	else if (__tmp > 65535)
    2f52:	fe 01       	movw	r30, r28
    2f54:	ff 96       	adiw	r30, 0x3f	; 63
    2f56:	60 81       	ld	r22, Z
    2f58:	71 81       	ldd	r23, Z+1	; 0x01
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	3f ef       	ldi	r19, 0xFF	; 255
    2f62:	4f e7       	ldi	r20, 0x7F	; 127
    2f64:	57 e4       	ldi	r21, 0x47	; 71
    2f66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	64 f5       	brge	.+88     	; 0x2fc6 <the_system+0x51e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ed 5b       	subi	r30, 0xBD	; 189
    2f72:	ff 4f       	sbci	r31, 0xFF	; 255
    2f74:	60 81       	ld	r22, Z
    2f76:	71 81       	ldd	r23, Z+1	; 0x01
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	93 81       	ldd	r25, Z+3	; 0x03
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e af       	std	Y+62, r25	; 0x3e
    2f9a:	8d af       	std	Y+61, r24	; 0x3d
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <the_system+0x514>
    2f9e:	89 e1       	ldi	r24, 0x19	; 25
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9c af       	std	Y+60, r25	; 0x3c
    2fa4:	8b af       	std	Y+59, r24	; 0x3b
    2fa6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fa8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <the_system+0x502>
    2fae:	9c af       	std	Y+60, r25	; 0x3c
    2fb0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9e af       	std	Y+62, r25	; 0x3e
    2fba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fbe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <the_system+0x4f6>
    2fc4:	16 c0       	rjmp	.+44     	; 0x2ff2 <the_system+0x54a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	ff 96       	adiw	r30, 0x3f	; 63
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e af       	std	Y+62, r25	; 0x3e
    2fdc:	8d af       	std	Y+61, r24	; 0x3d
    2fde:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fe0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fe2:	9a af       	std	Y+58, r25	; 0x3a
    2fe4:	89 af       	std	Y+57, r24	; 0x39
    2fe6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fe8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <the_system+0x542>
    2fee:	9a af       	std	Y+58, r25	; 0x3a
    2ff0:	89 af       	std	Y+57, r24	; 0x39

		case'B':
					CLCD_voidClearScreen();
					CLCD_voidSendString("Closing");

				    for(u8 i=8;i<14;i++)
    2ff2:	de 01       	movw	r26, r28
    2ff4:	ab 59       	subi	r26, 0x9B	; 155
    2ff6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	eb 59       	subi	r30, 0x9B	; 155
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	80 81       	ld	r24, Z
    3000:	8f 5f       	subi	r24, 0xFF	; 255
    3002:	8c 93       	st	X, r24
    3004:	fe 01       	movw	r30, r28
    3006:	eb 59       	subi	r30, 0x9B	; 155
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	8e 30       	cpi	r24, 0x0E	; 14
    300e:	08 f4       	brcc	.+2      	; 0x3012 <the_system+0x56a>
    3010:	61 cf       	rjmp	.-318    	; 0x2ed4 <the_system+0x42c>
				   				 CLCD_voidSetPosition(1,i);
				   				 CLCD_voidSendData('.');
				   				 _delay_ms(400);

				   			 }
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,PIN_VAL_HIGH);
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	60 e0       	ldi	r22, 0x00	; 0
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,PIN_VAL_LOW);
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	98 ec       	ldi	r25, 0xC8	; 200
    302a:	af ea       	ldi	r26, 0xAF	; 175
    302c:	b7 e4       	ldi	r27, 0x47	; 71
    302e:	8d ab       	std	Y+53, r24	; 0x35
    3030:	9e ab       	std	Y+54, r25	; 0x36
    3032:	af ab       	std	Y+55, r26	; 0x37
    3034:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3036:	6d a9       	ldd	r22, Y+53	; 0x35
    3038:	7e a9       	ldd	r23, Y+54	; 0x36
    303a:	8f a9       	ldd	r24, Y+55	; 0x37
    303c:	98 ad       	ldd	r25, Y+56	; 0x38
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a e7       	ldi	r20, 0x7A	; 122
    3044:	53 e4       	ldi	r21, 0x43	; 67
    3046:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	89 ab       	std	Y+49, r24	; 0x31
    3050:	9a ab       	std	Y+50, r25	; 0x32
    3052:	ab ab       	std	Y+51, r26	; 0x33
    3054:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3056:	69 a9       	ldd	r22, Y+49	; 0x31
    3058:	7a a9       	ldd	r23, Y+50	; 0x32
    305a:	8b a9       	ldd	r24, Y+51	; 0x33
    305c:	9c a9       	ldd	r25, Y+52	; 0x34
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <the_system+0x5d0>
		__ticks = 1;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	98 ab       	std	Y+48, r25	; 0x30
    3074:	8f a7       	std	Y+47, r24	; 0x2f
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <the_system+0x64e>
	else if (__tmp > 65535)
    3078:	69 a9       	ldd	r22, Y+49	; 0x31
    307a:	7a a9       	ldd	r23, Y+50	; 0x32
    307c:	8b a9       	ldd	r24, Y+51	; 0x33
    307e:	9c a9       	ldd	r25, Y+52	; 0x34
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <the_system+0x63a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3090:	6d a9       	ldd	r22, Y+53	; 0x35
    3092:	7e a9       	ldd	r23, Y+54	; 0x36
    3094:	8f a9       	ldd	r24, Y+55	; 0x37
    3096:	98 ad       	ldd	r25, Y+56	; 0x38
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	98 ab       	std	Y+48, r25	; 0x30
    30b6:	8f a7       	std	Y+47, r24	; 0x2f
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <the_system+0x630>
    30ba:	89 e1       	ldi	r24, 0x19	; 25
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	9e a7       	std	Y+46, r25	; 0x2e
    30c0:	8d a7       	std	Y+45, r24	; 0x2d
    30c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    30c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <the_system+0x61e>
    30ca:	9e a7       	std	Y+46, r25	; 0x2e
    30cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    30d0:	98 a9       	ldd	r25, Y+48	; 0x30
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	98 ab       	std	Y+48, r25	; 0x30
    30d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30da:	98 a9       	ldd	r25, Y+48	; 0x30
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <the_system+0x612>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <the_system+0x662>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e2:	69 a9       	ldd	r22, Y+49	; 0x31
    30e4:	7a a9       	ldd	r23, Y+50	; 0x32
    30e6:	8b a9       	ldd	r24, Y+51	; 0x33
    30e8:	9c a9       	ldd	r25, Y+52	; 0x34
    30ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	98 ab       	std	Y+48, r25	; 0x30
    30f4:	8f a7       	std	Y+47, r24	; 0x2f
    30f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f8:	98 a9       	ldd	r25, Y+48	; 0x30
    30fa:	9c a7       	std	Y+44, r25	; 0x2c
    30fc:	8b a7       	std	Y+43, r24	; 0x2b
    30fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    3100:	9c a5       	ldd	r25, Y+44	; 0x2c
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <the_system+0x65a>
    3106:	9c a7       	std	Y+44, r25	; 0x2c
    3108:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(90000);
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN1,PIN_VAL_LOW);
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	61 e0       	ldi	r22, 0x01	; 1
    310e:	40 e0       	ldi	r20, 0x00	; 0
    3110:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
					DIO_voidSetPinValue(DIO_PORTC,DIO_PIN0,PIN_VAL_LOW);
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    311e:	b8 c1       	rjmp	.+880    	; 0x3490 <the_system+0x9e8>

				break;

		case'C':

			CLCD_voidClearScreen();
    3120:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
			CLCD_voidSendString("    LIGHT ON");
    3124:	89 e3       	ldi	r24, 0x39	; 57
    3126:	92 e0       	ldi	r25, 0x02	; 2
    3128:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
		    for(u8 i=8;i<14;i++)
    312c:	fe 01       	movw	r30, r28
    312e:	ec 59       	subi	r30, 0x9C	; 156
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	88 e0       	ldi	r24, 0x08	; 8
    3134:	80 83       	st	Z, r24
    3136:	7b c0       	rjmp	.+246    	; 0x322e <the_system+0x786>
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	a6 e9       	ldi	r26, 0x96	; 150
    313e:	b3 e4       	ldi	r27, 0x43	; 67
    3140:	8f a3       	std	Y+39, r24	; 0x27
    3142:	98 a7       	std	Y+40, r25	; 0x28
    3144:	a9 a7       	std	Y+41, r26	; 0x29
    3146:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3148:	6f a1       	ldd	r22, Y+39	; 0x27
    314a:	78 a5       	ldd	r23, Y+40	; 0x28
    314c:	89 a5       	ldd	r24, Y+41	; 0x29
    314e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4a e7       	ldi	r20, 0x7A	; 122
    3156:	53 e4       	ldi	r21, 0x43	; 67
    3158:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	8b a3       	std	Y+35, r24	; 0x23
    3162:	9c a3       	std	Y+36, r25	; 0x24
    3164:	ad a3       	std	Y+37, r26	; 0x25
    3166:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3168:	6b a1       	ldd	r22, Y+35	; 0x23
    316a:	7c a1       	ldd	r23, Y+36	; 0x24
    316c:	8d a1       	ldd	r24, Y+37	; 0x25
    316e:	9e a1       	ldd	r25, Y+38	; 0x26
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e8       	ldi	r20, 0x80	; 128
    3176:	5f e3       	ldi	r21, 0x3F	; 63
    3178:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    317c:	88 23       	and	r24, r24
    317e:	2c f4       	brge	.+10     	; 0x318a <the_system+0x6e2>
		__ticks = 1;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9a a3       	std	Y+34, r25	; 0x22
    3186:	89 a3       	std	Y+33, r24	; 0x21
    3188:	3f c0       	rjmp	.+126    	; 0x3208 <the_system+0x760>
	else if (__tmp > 65535)
    318a:	6b a1       	ldd	r22, Y+35	; 0x23
    318c:	7c a1       	ldd	r23, Y+36	; 0x24
    318e:	8d a1       	ldd	r24, Y+37	; 0x25
    3190:	9e a1       	ldd	r25, Y+38	; 0x26
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	3f ef       	ldi	r19, 0xFF	; 255
    3196:	4f e7       	ldi	r20, 0x7F	; 127
    3198:	57 e4       	ldi	r21, 0x47	; 71
    319a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    319e:	18 16       	cp	r1, r24
    31a0:	4c f5       	brge	.+82     	; 0x31f4 <the_system+0x74c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31a2:	6f a1       	ldd	r22, Y+39	; 0x27
    31a4:	78 a5       	ldd	r23, Y+40	; 0x28
    31a6:	89 a5       	ldd	r24, Y+41	; 0x29
    31a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e2       	ldi	r20, 0x20	; 32
    31b0:	51 e4       	ldi	r21, 0x41	; 65
    31b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	bc 01       	movw	r22, r24
    31bc:	cd 01       	movw	r24, r26
    31be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	9a a3       	std	Y+34, r25	; 0x22
    31c8:	89 a3       	std	Y+33, r24	; 0x21
    31ca:	0f c0       	rjmp	.+30     	; 0x31ea <the_system+0x742>
    31cc:	89 e1       	ldi	r24, 0x19	; 25
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	98 a3       	std	Y+32, r25	; 0x20
    31d2:	8f 8f       	std	Y+31, r24	; 0x1f
    31d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31d6:	98 a1       	ldd	r25, Y+32	; 0x20
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <the_system+0x730>
    31dc:	98 a3       	std	Y+32, r25	; 0x20
    31de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e0:	89 a1       	ldd	r24, Y+33	; 0x21
    31e2:	9a a1       	ldd	r25, Y+34	; 0x22
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	9a a3       	std	Y+34, r25	; 0x22
    31e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ea:	89 a1       	ldd	r24, Y+33	; 0x21
    31ec:	9a a1       	ldd	r25, Y+34	; 0x22
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	69 f7       	brne	.-38     	; 0x31cc <the_system+0x724>
    31f2:	14 c0       	rjmp	.+40     	; 0x321c <the_system+0x774>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f4:	6b a1       	ldd	r22, Y+35	; 0x23
    31f6:	7c a1       	ldd	r23, Y+36	; 0x24
    31f8:	8d a1       	ldd	r24, Y+37	; 0x25
    31fa:	9e a1       	ldd	r25, Y+38	; 0x26
    31fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9a a3       	std	Y+34, r25	; 0x22
    3206:	89 a3       	std	Y+33, r24	; 0x21
    3208:	89 a1       	ldd	r24, Y+33	; 0x21
    320a:	9a a1       	ldd	r25, Y+34	; 0x22
    320c:	9e 8f       	std	Y+30, r25	; 0x1e
    320e:	8d 8f       	std	Y+29, r24	; 0x1d
    3210:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3212:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <the_system+0x76c>
    3218:	9e 8f       	std	Y+30, r25	; 0x1e
    321a:	8d 8f       	std	Y+29, r24	; 0x1d
    321c:	de 01       	movw	r26, r28
    321e:	ac 59       	subi	r26, 0x9C	; 156
    3220:	bf 4f       	sbci	r27, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	ec 59       	subi	r30, 0x9C	; 156
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	8f 5f       	subi	r24, 0xFF	; 255
    322c:	8c 93       	st	X, r24
    322e:	fe 01       	movw	r30, r28
    3230:	ec 59       	subi	r30, 0x9C	; 156
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	8e 30       	cpi	r24, 0x0E	; 14
    3238:	08 f4       	brcc	.+2      	; 0x323c <the_system+0x794>
    323a:	7e cf       	rjmp	.-260    	; 0x3138 <the_system+0x690>
				 {
					 _delay_ms(300);

				 }
				DIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,PIN_VAL_HIGH);
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	62 e0       	ldi	r22, 0x02	; 2
    3240:	41 e0       	ldi	r20, 0x01	; 1
    3242:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,PIN_VAL_HIGH);
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	63 e0       	ldi	r22, 0x03	; 3
    324a:	41 e0       	ldi	r20, 0x01	; 1
    324c:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,PIN_VAL_HIGH);
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	64 e0       	ldi	r22, 0x04	; 4
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    325a:	1a c1       	rjmp	.+564    	; 0x3490 <the_system+0x9e8>


			break;
		case'D':
			CLCD_voidClearScreen();
    325c:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
			CLCD_voidSendString("    LIGHT OFF");
    3260:	86 e4       	ldi	r24, 0x46	; 70
    3262:	92 e0       	ldi	r25, 0x02	; 2
    3264:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
			for(u8 i=8;i<14;i++)
    3268:	fe 01       	movw	r30, r28
    326a:	ed 59       	subi	r30, 0x9D	; 157
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	88 e0       	ldi	r24, 0x08	; 8
    3270:	80 83       	st	Z, r24
    3272:	7b c0       	rjmp	.+246    	; 0x336a <the_system+0x8c2>
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a6 e9       	ldi	r26, 0x96	; 150
    327a:	b3 e4       	ldi	r27, 0x43	; 67
    327c:	89 8f       	std	Y+25, r24	; 0x19
    327e:	9a 8f       	std	Y+26, r25	; 0x1a
    3280:	ab 8f       	std	Y+27, r26	; 0x1b
    3282:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3284:	69 8d       	ldd	r22, Y+25	; 0x19
    3286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    328a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	4a e7       	ldi	r20, 0x7A	; 122
    3292:	53 e4       	ldi	r21, 0x43	; 67
    3294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	8d 8b       	std	Y+21, r24	; 0x15
    329e:	9e 8b       	std	Y+22, r25	; 0x16
    32a0:	af 8b       	std	Y+23, r26	; 0x17
    32a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32a4:	6d 89       	ldd	r22, Y+21	; 0x15
    32a6:	7e 89       	ldd	r23, Y+22	; 0x16
    32a8:	8f 89       	ldd	r24, Y+23	; 0x17
    32aa:	98 8d       	ldd	r25, Y+24	; 0x18
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	40 e8       	ldi	r20, 0x80	; 128
    32b2:	5f e3       	ldi	r21, 0x3F	; 63
    32b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    32b8:	88 23       	and	r24, r24
    32ba:	2c f4       	brge	.+10     	; 0x32c6 <the_system+0x81e>
		__ticks = 1;
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9c 8b       	std	Y+20, r25	; 0x14
    32c2:	8b 8b       	std	Y+19, r24	; 0x13
    32c4:	3f c0       	rjmp	.+126    	; 0x3344 <the_system+0x89c>
	else if (__tmp > 65535)
    32c6:	6d 89       	ldd	r22, Y+21	; 0x15
    32c8:	7e 89       	ldd	r23, Y+22	; 0x16
    32ca:	8f 89       	ldd	r24, Y+23	; 0x17
    32cc:	98 8d       	ldd	r25, Y+24	; 0x18
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	3f ef       	ldi	r19, 0xFF	; 255
    32d2:	4f e7       	ldi	r20, 0x7F	; 127
    32d4:	57 e4       	ldi	r21, 0x47	; 71
    32d6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    32da:	18 16       	cp	r1, r24
    32dc:	4c f5       	brge	.+82     	; 0x3330 <the_system+0x888>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	69 8d       	ldd	r22, Y+25	; 0x19
    32e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e2       	ldi	r20, 0x20	; 32
    32ec:	51 e4       	ldi	r21, 0x41	; 65
    32ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32fe:	dc 01       	movw	r26, r24
    3300:	cb 01       	movw	r24, r22
    3302:	9c 8b       	std	Y+20, r25	; 0x14
    3304:	8b 8b       	std	Y+19, r24	; 0x13
    3306:	0f c0       	rjmp	.+30     	; 0x3326 <the_system+0x87e>
    3308:	89 e1       	ldi	r24, 0x19	; 25
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9a 8b       	std	Y+18, r25	; 0x12
    330e:	89 8b       	std	Y+17, r24	; 0x11
    3310:	89 89       	ldd	r24, Y+17	; 0x11
    3312:	9a 89       	ldd	r25, Y+18	; 0x12
    3314:	01 97       	sbiw	r24, 0x01	; 1
    3316:	f1 f7       	brne	.-4      	; 0x3314 <the_system+0x86c>
    3318:	9a 8b       	std	Y+18, r25	; 0x12
    331a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331c:	8b 89       	ldd	r24, Y+19	; 0x13
    331e:	9c 89       	ldd	r25, Y+20	; 0x14
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	9c 8b       	std	Y+20, r25	; 0x14
    3324:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3326:	8b 89       	ldd	r24, Y+19	; 0x13
    3328:	9c 89       	ldd	r25, Y+20	; 0x14
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	69 f7       	brne	.-38     	; 0x3308 <the_system+0x860>
    332e:	14 c0       	rjmp	.+40     	; 0x3358 <the_system+0x8b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3330:	6d 89       	ldd	r22, Y+21	; 0x15
    3332:	7e 89       	ldd	r23, Y+22	; 0x16
    3334:	8f 89       	ldd	r24, Y+23	; 0x17
    3336:	98 8d       	ldd	r25, Y+24	; 0x18
    3338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	9c 8b       	std	Y+20, r25	; 0x14
    3342:	8b 8b       	std	Y+19, r24	; 0x13
    3344:	8b 89       	ldd	r24, Y+19	; 0x13
    3346:	9c 89       	ldd	r25, Y+20	; 0x14
    3348:	98 8b       	std	Y+16, r25	; 0x10
    334a:	8f 87       	std	Y+15, r24	; 0x0f
    334c:	8f 85       	ldd	r24, Y+15	; 0x0f
    334e:	98 89       	ldd	r25, Y+16	; 0x10
    3350:	01 97       	sbiw	r24, 0x01	; 1
    3352:	f1 f7       	brne	.-4      	; 0x3350 <the_system+0x8a8>
    3354:	98 8b       	std	Y+16, r25	; 0x10
    3356:	8f 87       	std	Y+15, r24	; 0x0f
    3358:	de 01       	movw	r26, r28
    335a:	ad 59       	subi	r26, 0x9D	; 157
    335c:	bf 4f       	sbci	r27, 0xFF	; 255
    335e:	fe 01       	movw	r30, r28
    3360:	ed 59       	subi	r30, 0x9D	; 157
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	8c 93       	st	X, r24
    336a:	fe 01       	movw	r30, r28
    336c:	ed 59       	subi	r30, 0x9D	; 157
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	80 81       	ld	r24, Z
    3372:	8e 30       	cpi	r24, 0x0E	; 14
    3374:	08 f4       	brcc	.+2      	; 0x3378 <the_system+0x8d0>
    3376:	7e cf       	rjmp	.-260    	; 0x3274 <the_system+0x7cc>
							 {
								 _delay_ms(300);

							 }
				DIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,PIN_VAL_LOW);
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	62 e0       	ldi	r22, 0x02	; 2
    337c:	40 e0       	ldi	r20, 0x00	; 0
    337e:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,PIN_VAL_LOW);
    3382:	80 e0       	ldi	r24, 0x00	; 0
    3384:	63 e0       	ldi	r22, 0x03	; 3
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
				DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,PIN_VAL_LOW);
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	64 e0       	ldi	r22, 0x04	; 4
    3390:	40 e0       	ldi	r20, 0x00	; 0
    3392:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    3396:	7c c0       	rjmp	.+248    	; 0x3490 <the_system+0x9e8>



			break;
		case'E':
			CLCD_voidClearScreen();
    3398:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
			CLCD_voidSendString("LOGGING OUT");
    339c:	84 e5       	ldi	r24, 0x54	; 84
    339e:	92 e0       	ldi	r25, 0x02	; 2
    33a0:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	94 e2       	ldi	r25, 0x24	; 36
    33a8:	a4 ef       	ldi	r26, 0xF4	; 244
    33aa:	b9 e4       	ldi	r27, 0x49	; 73
    33ac:	8b 87       	std	Y+11, r24	; 0x0b
    33ae:	9c 87       	std	Y+12, r25	; 0x0c
    33b0:	ad 87       	std	Y+13, r26	; 0x0d
    33b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	4a e7       	ldi	r20, 0x7A	; 122
    33c2:	53 e4       	ldi	r21, 0x43	; 67
    33c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8f 83       	std	Y+7, r24	; 0x07
    33ce:	98 87       	std	Y+8, r25	; 0x08
    33d0:	a9 87       	std	Y+9, r26	; 0x09
    33d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d4:	6f 81       	ldd	r22, Y+7	; 0x07
    33d6:	78 85       	ldd	r23, Y+8	; 0x08
    33d8:	89 85       	ldd	r24, Y+9	; 0x09
    33da:	9a 85       	ldd	r25, Y+10	; 0x0a
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	5f e3       	ldi	r21, 0x3F	; 63
    33e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    33e8:	88 23       	and	r24, r24
    33ea:	2c f4       	brge	.+10     	; 0x33f6 <the_system+0x94e>
		__ticks = 1;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	3f c0       	rjmp	.+126    	; 0x3474 <the_system+0x9cc>
	else if (__tmp > 65535)
    33f6:	6f 81       	ldd	r22, Y+7	; 0x07
    33f8:	78 85       	ldd	r23, Y+8	; 0x08
    33fa:	89 85       	ldd	r24, Y+9	; 0x09
    33fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	3f ef       	ldi	r19, 0xFF	; 255
    3402:	4f e7       	ldi	r20, 0x7F	; 127
    3404:	57 e4       	ldi	r21, 0x47	; 71
    3406:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    340a:	18 16       	cp	r1, r24
    340c:	4c f5       	brge	.+82     	; 0x3460 <the_system+0x9b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3410:	7c 85       	ldd	r23, Y+12	; 0x0c
    3412:	8d 85       	ldd	r24, Y+13	; 0x0d
    3414:	9e 85       	ldd	r25, Y+14	; 0x0e
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e2       	ldi	r20, 0x20	; 32
    341c:	51 e4       	ldi	r21, 0x41	; 65
    341e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	8d 83       	std	Y+5, r24	; 0x05
    3436:	0f c0       	rjmp	.+30     	; 0x3456 <the_system+0x9ae>
    3438:	89 e1       	ldi	r24, 0x19	; 25
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	9c 83       	std	Y+4, r25	; 0x04
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	8b 81       	ldd	r24, Y+3	; 0x03
    3442:	9c 81       	ldd	r25, Y+4	; 0x04
    3444:	01 97       	sbiw	r24, 0x01	; 1
    3446:	f1 f7       	brne	.-4      	; 0x3444 <the_system+0x99c>
    3448:	9c 83       	std	Y+4, r25	; 0x04
    344a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3456:	8d 81       	ldd	r24, Y+5	; 0x05
    3458:	9e 81       	ldd	r25, Y+6	; 0x06
    345a:	00 97       	sbiw	r24, 0x00	; 0
    345c:	69 f7       	brne	.-38     	; 0x3438 <the_system+0x990>
    345e:	14 c0       	rjmp	.+40     	; 0x3488 <the_system+0x9e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3460:	6f 81       	ldd	r22, Y+7	; 0x07
    3462:	78 85       	ldd	r23, Y+8	; 0x08
    3464:	89 85       	ldd	r24, Y+9	; 0x09
    3466:	9a 85       	ldd	r25, Y+10	; 0x0a
    3468:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	9e 83       	std	Y+6, r25	; 0x06
    3472:	8d 83       	std	Y+5, r24	; 0x05
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	9a 83       	std	Y+2, r25	; 0x02
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	f1 f7       	brne	.-4      	; 0x3480 <the_system+0x9d8>
    3484:	9a 83       	std	Y+2, r25	; 0x02
    3486:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000000);
			CLCD_voidClearScreen();
    3488:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>

				flag=0;
    348c:	10 92 f6 02 	sts	0x02F6, r1

		}



		}
    3490:	c7 59       	subi	r28, 0x97	; 151
    3492:	df 4f       	sbci	r29, 0xFF	; 255
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	08 95       	ret

000034a8 <password_func>:




	void password_func(u8 right_pass[5])
	{
    34a8:	df 93       	push	r29
    34aa:	cf 93       	push	r28
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	e3 97       	sbiw	r28, 0x33	; 51
    34b2:	0f b6       	in	r0, 0x3f	; 63
    34b4:	f8 94       	cli
    34b6:	de bf       	out	0x3e, r29	; 62
    34b8:	0f be       	out	0x3f, r0	; 63
    34ba:	cd bf       	out	0x3d, r28	; 61
    34bc:	9b ab       	std	Y+51, r25	; 0x33
    34be:	8a ab       	std	Y+50, r24	; 0x32

	  u8 password[5];
	  u8 count=0;
    34c0:	1c a6       	std	Y+44, r1	; 0x2c

	  CLCD_voidSetPosition(2,0);
    34c2:	82 e0       	ldi	r24, 0x02	; 2
    34c4:	60 e0       	ldi	r22, 0x00	; 0
    34c6:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
	  CLCD_voidSendString("You Have 3trials");
    34ca:	80 e6       	ldi	r24, 0x60	; 96
    34cc:	92 e0       	ldi	r25, 0x02	; 2
    34ce:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
    34d2:	29 c1       	rjmp	.+594    	; 0x3726 <password_func+0x27e>

		while(count<3)
		{
			USART_voidSendString("\r\n Enter Your Passward \r\n");
    34d4:	81 e7       	ldi	r24, 0x71	; 113
    34d6:	92 e0       	ldi	r25, 0x02	; 2
    34d8:	0e 94 79 12 	call	0x24f2	; 0x24f2 <USART_voidSendString>
			USART_voidRecieveString(password);
    34dc:	ce 01       	movw	r24, r28
    34de:	8d 96       	adiw	r24, 0x2d	; 45
    34e0:	0e 94 ad 12 	call	0x255a	; 0x255a <USART_voidRecieveString>

			if(Compare_string(password,right_pass))
    34e4:	ce 01       	movw	r24, r28
    34e6:	8d 96       	adiw	r24, 0x2d	; 45
    34e8:	2a a9       	ldd	r18, Y+50	; 0x32
    34ea:	3b a9       	ldd	r19, Y+51	; 0x33
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <Compare_string>
    34f2:	88 23       	and	r24, r24
    34f4:	09 f4       	brne	.+2      	; 0x34f8 <password_func+0x50>
    34f6:	14 c1       	rjmp	.+552    	; 0x3720 <password_func+0x278>
				{
				flag=1;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	80 93 f6 02 	sts	0x02F6, r24
    34fe:	08 c1       	rjmp	.+528    	; 0x3710 <password_func+0x268>
				while(flag==1)
				{
					CLCD_voidClearScreen();
    3500:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
					CLCD_voidSendString("welcome home");
    3504:	8b e8       	ldi	r24, 0x8B	; 139
    3506:	92 e0       	ldi	r25, 0x02	; 2
    3508:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
					for(u8 i=8;i<14;i++)
    350c:	88 e0       	ldi	r24, 0x08	; 8
    350e:	8b a7       	std	Y+43, r24	; 0x2b
    3510:	75 c0       	rjmp	.+234    	; 0x35fc <password_func+0x154>
    3512:	80 e0       	ldi	r24, 0x00	; 0
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	a6 e9       	ldi	r26, 0x96	; 150
    3518:	b3 e4       	ldi	r27, 0x43	; 67
    351a:	8f a3       	std	Y+39, r24	; 0x27
    351c:	98 a7       	std	Y+40, r25	; 0x28
    351e:	a9 a7       	std	Y+41, r26	; 0x29
    3520:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3522:	6f a1       	ldd	r22, Y+39	; 0x27
    3524:	78 a5       	ldd	r23, Y+40	; 0x28
    3526:	89 a5       	ldd	r24, Y+41	; 0x29
    3528:	9a a5       	ldd	r25, Y+42	; 0x2a
    352a:	20 e0       	ldi	r18, 0x00	; 0
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	4a e7       	ldi	r20, 0x7A	; 122
    3530:	53 e4       	ldi	r21, 0x43	; 67
    3532:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	8b a3       	std	Y+35, r24	; 0x23
    353c:	9c a3       	std	Y+36, r25	; 0x24
    353e:	ad a3       	std	Y+37, r26	; 0x25
    3540:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3542:	6b a1       	ldd	r22, Y+35	; 0x23
    3544:	7c a1       	ldd	r23, Y+36	; 0x24
    3546:	8d a1       	ldd	r24, Y+37	; 0x25
    3548:	9e a1       	ldd	r25, Y+38	; 0x26
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e8       	ldi	r20, 0x80	; 128
    3550:	5f e3       	ldi	r21, 0x3F	; 63
    3552:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3556:	88 23       	and	r24, r24
    3558:	2c f4       	brge	.+10     	; 0x3564 <password_func+0xbc>
		__ticks = 1;
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	9a a3       	std	Y+34, r25	; 0x22
    3560:	89 a3       	std	Y+33, r24	; 0x21
    3562:	3f c0       	rjmp	.+126    	; 0x35e2 <password_func+0x13a>
	else if (__tmp > 65535)
    3564:	6b a1       	ldd	r22, Y+35	; 0x23
    3566:	7c a1       	ldd	r23, Y+36	; 0x24
    3568:	8d a1       	ldd	r24, Y+37	; 0x25
    356a:	9e a1       	ldd	r25, Y+38	; 0x26
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	3f ef       	ldi	r19, 0xFF	; 255
    3570:	4f e7       	ldi	r20, 0x7F	; 127
    3572:	57 e4       	ldi	r21, 0x47	; 71
    3574:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3578:	18 16       	cp	r1, r24
    357a:	4c f5       	brge	.+82     	; 0x35ce <password_func+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357c:	6f a1       	ldd	r22, Y+39	; 0x27
    357e:	78 a5       	ldd	r23, Y+40	; 0x28
    3580:	89 a5       	ldd	r24, Y+41	; 0x29
    3582:	9a a5       	ldd	r25, Y+42	; 0x2a
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e2       	ldi	r20, 0x20	; 32
    358a:	51 e4       	ldi	r21, 0x41	; 65
    358c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	bc 01       	movw	r22, r24
    3596:	cd 01       	movw	r24, r26
    3598:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9a a3       	std	Y+34, r25	; 0x22
    35a2:	89 a3       	std	Y+33, r24	; 0x21
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <password_func+0x11c>
    35a6:	89 e1       	ldi	r24, 0x19	; 25
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	98 a3       	std	Y+32, r25	; 0x20
    35ac:	8f 8f       	std	Y+31, r24	; 0x1f
    35ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35b0:	98 a1       	ldd	r25, Y+32	; 0x20
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <password_func+0x10a>
    35b6:	98 a3       	std	Y+32, r25	; 0x20
    35b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ba:	89 a1       	ldd	r24, Y+33	; 0x21
    35bc:	9a a1       	ldd	r25, Y+34	; 0x22
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	9a a3       	std	Y+34, r25	; 0x22
    35c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c4:	89 a1       	ldd	r24, Y+33	; 0x21
    35c6:	9a a1       	ldd	r25, Y+34	; 0x22
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	69 f7       	brne	.-38     	; 0x35a6 <password_func+0xfe>
    35cc:	14 c0       	rjmp	.+40     	; 0x35f6 <password_func+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ce:	6b a1       	ldd	r22, Y+35	; 0x23
    35d0:	7c a1       	ldd	r23, Y+36	; 0x24
    35d2:	8d a1       	ldd	r24, Y+37	; 0x25
    35d4:	9e a1       	ldd	r25, Y+38	; 0x26
    35d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	9a a3       	std	Y+34, r25	; 0x22
    35e0:	89 a3       	std	Y+33, r24	; 0x21
    35e2:	89 a1       	ldd	r24, Y+33	; 0x21
    35e4:	9a a1       	ldd	r25, Y+34	; 0x22
    35e6:	9e 8f       	std	Y+30, r25	; 0x1e
    35e8:	8d 8f       	std	Y+29, r24	; 0x1d
    35ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	f1 f7       	brne	.-4      	; 0x35ee <password_func+0x146>
    35f2:	9e 8f       	std	Y+30, r25	; 0x1e
    35f4:	8d 8f       	std	Y+29, r24	; 0x1d
    35f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    35f8:	8f 5f       	subi	r24, 0xFF	; 255
    35fa:	8b a7       	std	Y+43, r24	; 0x2b
    35fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    35fe:	8e 30       	cpi	r24, 0x0E	; 14
    3600:	08 f4       	brcc	.+2      	; 0x3604 <password_func+0x15c>
    3602:	87 cf       	rjmp	.-242    	; 0x3512 <password_func+0x6a>
									 {
										 _delay_ms(300);

									 }
					CLCD_voidClearScreen();
    3604:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
					CLCD_voidSetPosition(1,3);
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	63 e0       	ldi	r22, 0x03	; 3
    360c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
					CLCD_voidSendString("Choose Your ");
    3610:	88 e9       	ldi	r24, 0x98	; 152
    3612:	92 e0       	ldi	r25, 0x02	; 2
    3614:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
					CLCD_voidSetPosition(2,5);
    3618:	82 e0       	ldi	r24, 0x02	; 2
    361a:	65 e0       	ldi	r22, 0x05	; 5
    361c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSetPosition>
					CLCD_voidSendString(" Option");
    3620:	85 ea       	ldi	r24, 0xA5	; 165
    3622:	92 e0       	ldi	r25, 0x02	; 2
    3624:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
    3628:	80 e0       	ldi	r24, 0x00	; 0
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	a0 e2       	ldi	r26, 0x20	; 32
    362e:	b1 e4       	ldi	r27, 0x41	; 65
    3630:	89 8f       	std	Y+25, r24	; 0x19
    3632:	9a 8f       	std	Y+26, r25	; 0x1a
    3634:	ab 8f       	std	Y+27, r26	; 0x1b
    3636:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3638:	69 8d       	ldd	r22, Y+25	; 0x19
    363a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    363c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    363e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	4a e7       	ldi	r20, 0x7A	; 122
    3646:	53 e4       	ldi	r21, 0x43	; 67
    3648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	8d 8b       	std	Y+21, r24	; 0x15
    3652:	9e 8b       	std	Y+22, r25	; 0x16
    3654:	af 8b       	std	Y+23, r26	; 0x17
    3656:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3658:	6d 89       	ldd	r22, Y+21	; 0x15
    365a:	7e 89       	ldd	r23, Y+22	; 0x16
    365c:	8f 89       	ldd	r24, Y+23	; 0x17
    365e:	98 8d       	ldd	r25, Y+24	; 0x18
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	40 e8       	ldi	r20, 0x80	; 128
    3666:	5f e3       	ldi	r21, 0x3F	; 63
    3668:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    366c:	88 23       	and	r24, r24
    366e:	2c f4       	brge	.+10     	; 0x367a <password_func+0x1d2>
		__ticks = 1;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	9c 8b       	std	Y+20, r25	; 0x14
    3676:	8b 8b       	std	Y+19, r24	; 0x13
    3678:	3f c0       	rjmp	.+126    	; 0x36f8 <password_func+0x250>
	else if (__tmp > 65535)
    367a:	6d 89       	ldd	r22, Y+21	; 0x15
    367c:	7e 89       	ldd	r23, Y+22	; 0x16
    367e:	8f 89       	ldd	r24, Y+23	; 0x17
    3680:	98 8d       	ldd	r25, Y+24	; 0x18
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	3f ef       	ldi	r19, 0xFF	; 255
    3686:	4f e7       	ldi	r20, 0x7F	; 127
    3688:	57 e4       	ldi	r21, 0x47	; 71
    368a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    368e:	18 16       	cp	r1, r24
    3690:	4c f5       	brge	.+82     	; 0x36e4 <password_func+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3692:	69 8d       	ldd	r22, Y+25	; 0x19
    3694:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    369a:	20 e0       	ldi	r18, 0x00	; 0
    369c:	30 e0       	ldi	r19, 0x00	; 0
    369e:	40 e2       	ldi	r20, 0x20	; 32
    36a0:	51 e4       	ldi	r21, 0x41	; 65
    36a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	bc 01       	movw	r22, r24
    36ac:	cd 01       	movw	r24, r26
    36ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	9c 8b       	std	Y+20, r25	; 0x14
    36b8:	8b 8b       	std	Y+19, r24	; 0x13
    36ba:	0f c0       	rjmp	.+30     	; 0x36da <password_func+0x232>
    36bc:	89 e1       	ldi	r24, 0x19	; 25
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	9a 8b       	std	Y+18, r25	; 0x12
    36c2:	89 8b       	std	Y+17, r24	; 0x11
    36c4:	89 89       	ldd	r24, Y+17	; 0x11
    36c6:	9a 89       	ldd	r25, Y+18	; 0x12
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <password_func+0x220>
    36cc:	9a 8b       	std	Y+18, r25	; 0x12
    36ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d0:	8b 89       	ldd	r24, Y+19	; 0x13
    36d2:	9c 89       	ldd	r25, Y+20	; 0x14
    36d4:	01 97       	sbiw	r24, 0x01	; 1
    36d6:	9c 8b       	std	Y+20, r25	; 0x14
    36d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36da:	8b 89       	ldd	r24, Y+19	; 0x13
    36dc:	9c 89       	ldd	r25, Y+20	; 0x14
    36de:	00 97       	sbiw	r24, 0x00	; 0
    36e0:	69 f7       	brne	.-38     	; 0x36bc <password_func+0x214>
    36e2:	14 c0       	rjmp	.+40     	; 0x370c <password_func+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e4:	6d 89       	ldd	r22, Y+21	; 0x15
    36e6:	7e 89       	ldd	r23, Y+22	; 0x16
    36e8:	8f 89       	ldd	r24, Y+23	; 0x17
    36ea:	98 8d       	ldd	r25, Y+24	; 0x18
    36ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	9c 8b       	std	Y+20, r25	; 0x14
    36f6:	8b 8b       	std	Y+19, r24	; 0x13
    36f8:	8b 89       	ldd	r24, Y+19	; 0x13
    36fa:	9c 89       	ldd	r25, Y+20	; 0x14
    36fc:	98 8b       	std	Y+16, r25	; 0x10
    36fe:	8f 87       	std	Y+15, r24	; 0x0f
    3700:	8f 85       	ldd	r24, Y+15	; 0x0f
    3702:	98 89       	ldd	r25, Y+16	; 0x10
    3704:	01 97       	sbiw	r24, 0x01	; 1
    3706:	f1 f7       	brne	.-4      	; 0x3704 <password_func+0x25c>
    3708:	98 8b       	std	Y+16, r25	; 0x10
    370a:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10);
				the_system();
    370c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <the_system>
			USART_voidRecieveString(password);

			if(Compare_string(password,right_pass))
				{
				flag=1;
				while(flag==1)
    3710:	80 91 f6 02 	lds	r24, 0x02F6
    3714:	81 30       	cpi	r24, 0x01	; 1
    3716:	09 f4       	brne	.+2      	; 0x371a <password_func+0x272>
    3718:	f3 ce       	rjmp	.-538    	; 0x3500 <password_func+0x58>
					CLCD_voidSendString(" Option");
					_delay_ms(10);
				the_system();

				}
			   count=4;
    371a:	84 e0       	ldi	r24, 0x04	; 4
    371c:	8c a7       	std	Y+44, r24	; 0x2c
    371e:	03 c0       	rjmp	.+6      	; 0x3726 <password_func+0x27e>

			}
			else
			{
				count++;
    3720:	8c a5       	ldd	r24, Y+44	; 0x2c
    3722:	8f 5f       	subi	r24, 0xFF	; 255
    3724:	8c a7       	std	Y+44, r24	; 0x2c
	  u8 count=0;

	  CLCD_voidSetPosition(2,0);
	  CLCD_voidSendString("You Have 3trials");

		while(count<3)
    3726:	8c a5       	ldd	r24, Y+44	; 0x2c
    3728:	83 30       	cpi	r24, 0x03	; 3
    372a:	08 f4       	brcc	.+2      	; 0x372e <password_func+0x286>
    372c:	d3 ce       	rjmp	.-602    	; 0x34d4 <password_func+0x2c>

			}

		}

		if(count==3)
    372e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3730:	83 30       	cpi	r24, 0x03	; 3
    3732:	09 f0       	breq	.+2      	; 0x3736 <password_func+0x28e>
    3734:	8d c0       	rjmp	.+282    	; 0x3850 <password_func+0x3a8>
		{
			CLCD_voidClearScreen();
    3736:	0e 94 96 09 	call	0x132c	; 0x132c <CLCD_voidClearScreen>
          CLCD_voidSendString("WARNING ALARM !!");
    373a:	8d ea       	ldi	r24, 0xAD	; 173
    373c:	92 e0       	ldi	r25, 0x02	; 2
    373e:	0e 94 4e 09 	call	0x129c	; 0x129c <CLCD_voidSendString>
          while(1)
          {
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,PIN_VAL_HIGH);
    3742:	80 e0       	ldi	r24, 0x00	; 0
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	41 e0       	ldi	r20, 0x01	; 1
    3748:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,PIN_VAL_HIGH);
    374c:	80 e0       	ldi	r24, 0x00	; 0
    374e:	61 e0       	ldi	r22, 0x01	; 1
    3750:	41 e0       	ldi	r20, 0x01	; 1
    3752:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	aa e7       	ldi	r26, 0x7A	; 122
    375c:	b5 e4       	ldi	r27, 0x45	; 69
    375e:	8b 87       	std	Y+11, r24	; 0x0b
    3760:	9c 87       	std	Y+12, r25	; 0x0c
    3762:	ad 87       	std	Y+13, r26	; 0x0d
    3764:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3766:	6b 85       	ldd	r22, Y+11	; 0x0b
    3768:	7c 85       	ldd	r23, Y+12	; 0x0c
    376a:	8d 85       	ldd	r24, Y+13	; 0x0d
    376c:	9e 85       	ldd	r25, Y+14	; 0x0e
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	30 e0       	ldi	r19, 0x00	; 0
    3772:	4a e7       	ldi	r20, 0x7A	; 122
    3774:	53 e4       	ldi	r21, 0x43	; 67
    3776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	8f 83       	std	Y+7, r24	; 0x07
    3780:	98 87       	std	Y+8, r25	; 0x08
    3782:	a9 87       	std	Y+9, r26	; 0x09
    3784:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3786:	6f 81       	ldd	r22, Y+7	; 0x07
    3788:	78 85       	ldd	r23, Y+8	; 0x08
    378a:	89 85       	ldd	r24, Y+9	; 0x09
    378c:	9a 85       	ldd	r25, Y+10	; 0x0a
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e8       	ldi	r20, 0x80	; 128
    3794:	5f e3       	ldi	r21, 0x3F	; 63
    3796:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    379a:	88 23       	and	r24, r24
    379c:	2c f4       	brge	.+10     	; 0x37a8 <password_func+0x300>
		__ticks = 1;
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	9e 83       	std	Y+6, r25	; 0x06
    37a4:	8d 83       	std	Y+5, r24	; 0x05
    37a6:	3f c0       	rjmp	.+126    	; 0x3826 <password_func+0x37e>
	else if (__tmp > 65535)
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	3f ef       	ldi	r19, 0xFF	; 255
    37b4:	4f e7       	ldi	r20, 0x7F	; 127
    37b6:	57 e4       	ldi	r21, 0x47	; 71
    37b8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    37bc:	18 16       	cp	r1, r24
    37be:	4c f5       	brge	.+82     	; 0x3812 <password_func+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e2       	ldi	r20, 0x20	; 32
    37ce:	51 e4       	ldi	r21, 0x41	; 65
    37d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	bc 01       	movw	r22, r24
    37da:	cd 01       	movw	r24, r26
    37dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	9e 83       	std	Y+6, r25	; 0x06
    37e6:	8d 83       	std	Y+5, r24	; 0x05
    37e8:	0f c0       	rjmp	.+30     	; 0x3808 <password_func+0x360>
    37ea:	89 e1       	ldi	r24, 0x19	; 25
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	9c 83       	std	Y+4, r25	; 0x04
    37f0:	8b 83       	std	Y+3, r24	; 0x03
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	9c 81       	ldd	r25, Y+4	; 0x04
    37f6:	01 97       	sbiw	r24, 0x01	; 1
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <password_func+0x34e>
    37fa:	9c 83       	std	Y+4, r25	; 0x04
    37fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	9e 83       	std	Y+6, r25	; 0x06
    3806:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3808:	8d 81       	ldd	r24, Y+5	; 0x05
    380a:	9e 81       	ldd	r25, Y+6	; 0x06
    380c:	00 97       	sbiw	r24, 0x00	; 0
    380e:	69 f7       	brne	.-38     	; 0x37ea <password_func+0x342>
    3810:	14 c0       	rjmp	.+40     	; 0x383a <password_func+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3812:	6f 81       	ldd	r22, Y+7	; 0x07
    3814:	78 85       	ldd	r23, Y+8	; 0x08
    3816:	89 85       	ldd	r24, Y+9	; 0x09
    3818:	9a 85       	ldd	r25, Y+10	; 0x0a
    381a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	9e 83       	std	Y+6, r25	; 0x06
    3824:	8d 83       	std	Y+5, r24	; 0x05
    3826:	8d 81       	ldd	r24, Y+5	; 0x05
    3828:	9e 81       	ldd	r25, Y+6	; 0x06
    382a:	9a 83       	std	Y+2, r25	; 0x02
    382c:	89 83       	std	Y+1, r24	; 0x01
    382e:	89 81       	ldd	r24, Y+1	; 0x01
    3830:	9a 81       	ldd	r25, Y+2	; 0x02
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	f1 f7       	brne	.-4      	; 0x3832 <password_func+0x38a>
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(4000);
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN0,PIN_VAL_LOW);
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	60 e0       	ldi	r22, 0x00	; 0
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,PIN_VAL_LOW);
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	61 e0       	ldi	r22, 0x01	; 1
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <DIO_voidSetPinValue>
    384e:	79 cf       	rjmp	.-270    	; 0x3742 <password_func+0x29a>

          }
		}


		}
    3850:	e3 96       	adiw	r28, 0x33	; 51
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	cf 91       	pop	r28
    385e:	df 91       	pop	r29
    3860:	08 95       	ret

00003862 <__udivmodhi4>:
    3862:	aa 1b       	sub	r26, r26
    3864:	bb 1b       	sub	r27, r27
    3866:	51 e1       	ldi	r21, 0x11	; 17
    3868:	07 c0       	rjmp	.+14     	; 0x3878 <__udivmodhi4_ep>

0000386a <__udivmodhi4_loop>:
    386a:	aa 1f       	adc	r26, r26
    386c:	bb 1f       	adc	r27, r27
    386e:	a6 17       	cp	r26, r22
    3870:	b7 07       	cpc	r27, r23
    3872:	10 f0       	brcs	.+4      	; 0x3878 <__udivmodhi4_ep>
    3874:	a6 1b       	sub	r26, r22
    3876:	b7 0b       	sbc	r27, r23

00003878 <__udivmodhi4_ep>:
    3878:	88 1f       	adc	r24, r24
    387a:	99 1f       	adc	r25, r25
    387c:	5a 95       	dec	r21
    387e:	a9 f7       	brne	.-22     	; 0x386a <__udivmodhi4_loop>
    3880:	80 95       	com	r24
    3882:	90 95       	com	r25
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	08 95       	ret

0000388a <__prologue_saves__>:
    388a:	2f 92       	push	r2
    388c:	3f 92       	push	r3
    388e:	4f 92       	push	r4
    3890:	5f 92       	push	r5
    3892:	6f 92       	push	r6
    3894:	7f 92       	push	r7
    3896:	8f 92       	push	r8
    3898:	9f 92       	push	r9
    389a:	af 92       	push	r10
    389c:	bf 92       	push	r11
    389e:	cf 92       	push	r12
    38a0:	df 92       	push	r13
    38a2:	ef 92       	push	r14
    38a4:	ff 92       	push	r15
    38a6:	0f 93       	push	r16
    38a8:	1f 93       	push	r17
    38aa:	cf 93       	push	r28
    38ac:	df 93       	push	r29
    38ae:	cd b7       	in	r28, 0x3d	; 61
    38b0:	de b7       	in	r29, 0x3e	; 62
    38b2:	ca 1b       	sub	r28, r26
    38b4:	db 0b       	sbc	r29, r27
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	09 94       	ijmp

000038c2 <__epilogue_restores__>:
    38c2:	2a 88       	ldd	r2, Y+18	; 0x12
    38c4:	39 88       	ldd	r3, Y+17	; 0x11
    38c6:	48 88       	ldd	r4, Y+16	; 0x10
    38c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    38ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    38cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    38ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    38d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d4:	b9 84       	ldd	r11, Y+9	; 0x09
    38d6:	c8 84       	ldd	r12, Y+8	; 0x08
    38d8:	df 80       	ldd	r13, Y+7	; 0x07
    38da:	ee 80       	ldd	r14, Y+6	; 0x06
    38dc:	fd 80       	ldd	r15, Y+5	; 0x05
    38de:	0c 81       	ldd	r16, Y+4	; 0x04
    38e0:	1b 81       	ldd	r17, Y+3	; 0x03
    38e2:	aa 81       	ldd	r26, Y+2	; 0x02
    38e4:	b9 81       	ldd	r27, Y+1	; 0x01
    38e6:	ce 0f       	add	r28, r30
    38e8:	d1 1d       	adc	r29, r1
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	ed 01       	movw	r28, r26
    38f6:	08 95       	ret

000038f8 <_exit>:
    38f8:	f8 94       	cli

000038fa <__stop_program>:
    38fa:	ff cf       	rjmp	.-2      	; 0x38fa <__stop_program>
